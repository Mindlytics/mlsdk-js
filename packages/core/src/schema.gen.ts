/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/charts/segmentation-chart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Segmentation Chart
         * @description Get a Segmentation Chart
         */
        get: {
            parameters: {
                query: {
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                    /** @description Chart Controls */
                    chartControls: {
                        /**
                         * @description Time range for the chart.
                         * @example {
                         *       "start": "2021-01-01T00:00:00Z",
                         *       "end": "2021-01-02T00:00:00Z",
                         *       "period": "day",
                         *       "tz": "America/New_York"
                         *     }
                         */
                        range: {
                            /**
                             * @description The start of the range as an ISO date string
                             * @example 2021-01-01T00:00:00Z
                             */
                            start: string;
                            /**
                             * @description The end of the range as an ISO date string
                             * @example 2021-01-02T00:00:00Z
                             */
                            end: string;
                            /**
                             * @description The size of the bins, or points, in a chart
                             * @example day
                             * @enum {string}
                             */
                            period: "day" | "week" | "month";
                            /**
                             * @description The browser's timezone
                             * @example America/New_York
                             */
                            tz: string;
                        };
                        /** @description Event filters for the segmentation. */
                        eventFilters: {
                            /** @description The name of the event.  Can be "Any Event" to match any event. */
                            event_name: string;
                            /** @description If specified the event must have all the property/values specified.  User traits on the event are also valid. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /**
                             * @description If specified, the event must have occurred within this time range.
                             * @example {
                             *       "start": "2021-01-01T00:00:00Z",
                             *       "end": "2021-01-02T00:00:00Z"
                             *     }
                             */
                            within?: {
                                /**
                                 * @description The start of the time range as an ISO date string
                                 * @example 2021-01-01T00:00:00Z
                                 */
                                start?: string;
                                /**
                                 * @description The end of the time range as an ISO date string
                                 * @example 2021-01-02T00:00:00Z
                                 */
                                end?: string;
                                /**
                                 * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                 * @example {
                                 *       "number": 1,
                                 *       "unit": "day",
                                 *       "tz": "America/New_York"
                                 *     }
                                 */
                                period?: {
                                    /**
                                     * @description The number of time units
                                     * @example 1
                                     */
                                    number: number;
                                    /**
                                     * @description The time unit
                                     * @example day
                                     * @enum {string}
                                     */
                                    unit: "day" | "week" | "month";
                                    /**
                                     * @description The timezone
                                     * @example America/New_York
                                     */
                                    tz: string;
                                };
                            };
                            /** @description If specified, the events will be grouped by this property for the values specified. */
                            groupBy?: {
                                property_name: string;
                                property_values: (string | number | boolean)[];
                            };
                            /** @description If specified, the number of events of this type that must have occurred within the time range. The default is 1. */
                            number_of?: number;
                            /**
                             * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                             * @enum {string}
                             */
                            number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                            /**
                             * @description If specified, the operation to use when combining any previous event filters.  Defaults to "and".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or" | "then";
                        }[];
                        /** @description User filters for the segmentation. */
                        userFilters?: {
                            /** @description The name of the cohort.  Can be "All Users" to match any user. */
                            cohort?: string;
                            /** @description If specified, the user must have the trait/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /** @description If specified, the user must have expressed the intents. */
                            shown_intents?: {
                                /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                                intent: string;
                                /** @description If specified, the intent must have the attribute/values specified. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the intent must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /** @description If specified, the user must have performed the events. */
                            performed_events?: {
                                /** @description The name of the event.  Can be "Any Event" to match any event. */
                                event_name: string;
                                /** @description If specified the event must have all the property/values specified.  User traits on the event are also valid. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the event must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the events will be grouped by this property for the values specified. */
                                groupBy?: {
                                    property_name: string;
                                    property_values: (string | number | boolean)[];
                                };
                                /** @description If specified, the number of events of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous event filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /**
                             * @description If specified, the operation to use when combining any previous user filters.  Defaults to "or".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or";
                        }[];
                        /** @description Users who have shown this intent. */
                        shownIntents?: {
                            /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                            intent: string;
                            /** @description If specified, the intent must have the attribute/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /**
                             * @description If specified, the intent must have occurred within this time range.
                             * @example {
                             *       "start": "2021-01-01T00:00:00Z",
                             *       "end": "2021-01-02T00:00:00Z"
                             *     }
                             */
                            within?: {
                                /**
                                 * @description The start of the time range as an ISO date string
                                 * @example 2021-01-01T00:00:00Z
                                 */
                                start?: string;
                                /**
                                 * @description The end of the time range as an ISO date string
                                 * @example 2021-01-02T00:00:00Z
                                 */
                                end?: string;
                                /**
                                 * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                 * @example {
                                 *       "number": 1,
                                 *       "unit": "day",
                                 *       "tz": "America/New_York"
                                 *     }
                                 */
                                period?: {
                                    /**
                                     * @description The number of time units
                                     * @example 1
                                     */
                                    number: number;
                                    /**
                                     * @description The time unit
                                     * @example day
                                     * @enum {string}
                                     */
                                    unit: "day" | "week" | "month";
                                    /**
                                     * @description The timezone
                                     * @example America/New_York
                                     */
                                    tz: string;
                                };
                            };
                            /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                            number_of?: number;
                            /**
                             * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                             * @enum {string}
                             */
                            number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                            /**
                             * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or" | "then";
                        }[];
                    };
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Name of the event */
                            event_name: string;
                            /** @description Points of the segmentation chart, if no group by was used. */
                            points?: {
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description Total number of events in this period */
                                total: number;
                                /** @description Number of unique users in this period */
                                unique: number;
                                /** @description Average number of events per unique user in this period */
                                average: number;
                                /** @description Drilldown id for this point */
                                drilldown_id?: string;
                            }[];
                            /** @description Groups of points in the segmentation chart, if group by was used. */
                            groups?: {
                                /** @description Group name */
                                group: string;
                                /** @description Points for the group */
                                points: {
                                    /** @description Start timestamp of the point */
                                    start: string;
                                    /** @description End timestamp of the point */
                                    end: string;
                                    /** @description Total number of events in this period */
                                    total: number;
                                    /** @description Number of unique users in this period */
                                    unique: number;
                                    /** @description Average number of events per unique user in this period */
                                    average: number;
                                    /** @description Drilldown id for this point */
                                    drilldown_id?: string;
                                }[];
                            }[];
                            /** @description Highlights for the chart, if not grouped. */
                            highlights?: {
                                /** @description Average number of events per period */
                                average_events: number;
                                /** @description Average number of unique users per period */
                                average_unique_users: number;
                            };
                        }[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charts/retention-chart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Retention Chart
         * @description Get a Retention Chart
         */
        get: {
            parameters: {
                query: {
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                    /** @description Chart Controls */
                    chartControls: {
                        /**
                         * @description Time range for the chart.
                         * @example {
                         *       "start": "2021-01-01T00:00:00Z",
                         *       "end": "2021-01-02T00:00:00Z",
                         *       "period": "day",
                         *       "tz": "America/New_York"
                         *     }
                         */
                        range: {
                            /**
                             * @description The start of the range as an ISO date string
                             * @example 2021-01-01T00:00:00Z
                             */
                            start: string;
                            /**
                             * @description The end of the range as an ISO date string
                             * @example 2021-01-02T00:00:00Z
                             */
                            end: string;
                            /**
                             * @description The size of the bins, or points, in a chart
                             * @example day
                             * @enum {string}
                             */
                            period: "day" | "week" | "month";
                            /**
                             * @description The browser's timezone
                             * @example America/New_York
                             */
                            tz: string;
                        };
                        /** @description The event to start the retention chart from. */
                        startingEvent: {
                            /** @description The name of the event.  Can be "Any Event" to match any event. */
                            event_name: string;
                            /** @description If specified the event must have all the property/values specified.  User traits on the event are also valid. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /**
                             * @description If specified, the event must have occurred within this time range.
                             * @example {
                             *       "start": "2021-01-01T00:00:00Z",
                             *       "end": "2021-01-02T00:00:00Z"
                             *     }
                             */
                            within?: {
                                /**
                                 * @description The start of the time range as an ISO date string
                                 * @example 2021-01-01T00:00:00Z
                                 */
                                start?: string;
                                /**
                                 * @description The end of the time range as an ISO date string
                                 * @example 2021-01-02T00:00:00Z
                                 */
                                end?: string;
                                /**
                                 * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                 * @example {
                                 *       "number": 1,
                                 *       "unit": "day",
                                 *       "tz": "America/New_York"
                                 *     }
                                 */
                                period?: {
                                    /**
                                     * @description The number of time units
                                     * @example 1
                                     */
                                    number: number;
                                    /**
                                     * @description The time unit
                                     * @example day
                                     * @enum {string}
                                     */
                                    unit: "day" | "week" | "month";
                                    /**
                                     * @description The timezone
                                     * @example America/New_York
                                     */
                                    tz: string;
                                };
                            };
                            /** @description If specified, the events will be grouped by this property for the values specified. */
                            groupBy?: {
                                property_name: string;
                                property_values: (string | number | boolean)[];
                            };
                            /** @description If specified, the number of events of this type that must have occurred within the time range. The default is 1. */
                            number_of?: number;
                            /**
                             * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                             * @enum {string}
                             */
                            number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                            /**
                             * @description If specified, the operation to use when combining any previous event filters.  Defaults to "and".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or" | "then";
                        };
                        /** @description The events to check for in the following periods. */
                        returnEvents?: {
                            /** @description The name of the event.  Can be "Any Event" to match any event. */
                            event_name: string;
                            /** @description If specified the event must have all the property/values specified.  User traits on the event are also valid. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /**
                             * @description If specified, the event must have occurred within this time range.
                             * @example {
                             *       "start": "2021-01-01T00:00:00Z",
                             *       "end": "2021-01-02T00:00:00Z"
                             *     }
                             */
                            within?: {
                                /**
                                 * @description The start of the time range as an ISO date string
                                 * @example 2021-01-01T00:00:00Z
                                 */
                                start?: string;
                                /**
                                 * @description The end of the time range as an ISO date string
                                 * @example 2021-01-02T00:00:00Z
                                 */
                                end?: string;
                                /**
                                 * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                 * @example {
                                 *       "number": 1,
                                 *       "unit": "day",
                                 *       "tz": "America/New_York"
                                 *     }
                                 */
                                period?: {
                                    /**
                                     * @description The number of time units
                                     * @example 1
                                     */
                                    number: number;
                                    /**
                                     * @description The time unit
                                     * @example day
                                     * @enum {string}
                                     */
                                    unit: "day" | "week" | "month";
                                    /**
                                     * @description The timezone
                                     * @example America/New_York
                                     */
                                    tz: string;
                                };
                            };
                            /** @description If specified, the events will be grouped by this property for the values specified. */
                            groupBy?: {
                                property_name: string;
                                property_values: (string | number | boolean)[];
                            };
                            /** @description If specified, the number of events of this type that must have occurred within the time range. The default is 1. */
                            number_of?: number;
                            /**
                             * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                             * @enum {string}
                             */
                            number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                            /**
                             * @description If specified, the operation to use when combining any previous event filters.  Defaults to "and".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or" | "then";
                        }[];
                        /** @description User filters for the chart. */
                        userFilters?: {
                            /** @description The name of the cohort.  Can be "All Users" to match any user. */
                            cohort?: string;
                            /** @description If specified, the user must have the trait/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /** @description If specified, the user must have expressed the intents. */
                            shown_intents?: {
                                /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                                intent: string;
                                /** @description If specified, the intent must have the attribute/values specified. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the intent must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /** @description If specified, the user must have performed the events. */
                            performed_events?: {
                                /** @description The name of the event.  Can be "Any Event" to match any event. */
                                event_name: string;
                                /** @description If specified the event must have all the property/values specified.  User traits on the event are also valid. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the event must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the events will be grouped by this property for the values specified. */
                                groupBy?: {
                                    property_name: string;
                                    property_values: (string | number | boolean)[];
                                };
                                /** @description If specified, the number of events of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous event filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /**
                             * @description If specified, the operation to use when combining any previous user filters.  Defaults to "or".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or";
                        }[];
                        /** @description Users who have shown this intent. */
                        shownIntents?: {
                            /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                            intent: string;
                            /** @description If specified, the intent must have the attribute/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /**
                             * @description If specified, the intent must have occurred within this time range.
                             * @example {
                             *       "start": "2021-01-01T00:00:00Z",
                             *       "end": "2021-01-02T00:00:00Z"
                             *     }
                             */
                            within?: {
                                /**
                                 * @description The start of the time range as an ISO date string
                                 * @example 2021-01-01T00:00:00Z
                                 */
                                start?: string;
                                /**
                                 * @description The end of the time range as an ISO date string
                                 * @example 2021-01-02T00:00:00Z
                                 */
                                end?: string;
                                /**
                                 * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                 * @example {
                                 *       "number": 1,
                                 *       "unit": "day",
                                 *       "tz": "America/New_York"
                                 *     }
                                 */
                                period?: {
                                    /**
                                     * @description The number of time units
                                     * @example 1
                                     */
                                    number: number;
                                    /**
                                     * @description The time unit
                                     * @example day
                                     * @enum {string}
                                     */
                                    unit: "day" | "week" | "month";
                                    /**
                                     * @description The timezone
                                     * @example America/New_York
                                     */
                                    tz: string;
                                };
                            };
                            /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                            number_of?: number;
                            /**
                             * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                             * @enum {string}
                             */
                            number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                            /**
                             * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or" | "then";
                        }[];
                        /**
                         * @description Group by user trait.
                         * @example {
                         *       "trait_name": "gender",
                         *       "trait_values": [
                         *         "male",
                         *         "female"
                         *       ]
                         *     }
                         */
                        groupBy?: {
                            trait_name: string;
                            trait_values?: (string | number | boolean)[];
                        };
                    };
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Name of the chart */
                            chart_name: string;
                            /** @description Rows of the retention chart, if no group by was used. */
                            rows?: {
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description Number of users in this period */
                                count: number;
                                /** @description Percentage of users that completed this event with respect to the starting event users. */
                                percent: number;
                                /** @description Drilldown id for this event. */
                                drilldown_id?: string;
                            }[][];
                            /** @description Headers for the columns of the chart; the average percentage and total users in each column. */
                            column_headers: {
                                /** @description Number of users in this period */
                                count: number;
                                /** @description Average percentage of users that completed the event with respect to the starting event users. */
                                average: number;
                            }[];
                            /** @description Headers for the rows of the chart; the number of users in each row. */
                            row_headers: number[];
                            /** @description Total number of users in the chart represented in the chart. */
                            total_users: number;
                        }[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charts/session-chart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Session Chart
         * @description Get a Session Chart
         */
        get: {
            parameters: {
                query: {
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                    /** @description Chart Controls */
                    chartControls: {
                        /**
                         * @description Time range for the chart.
                         * @example {
                         *       "start": "2021-01-01T00:00:00Z",
                         *       "end": "2021-01-02T00:00:00Z",
                         *       "period": "day",
                         *       "tz": "America/New_York"
                         *     }
                         */
                        range: {
                            /**
                             * @description The start of the range as an ISO date string
                             * @example 2021-01-01T00:00:00Z
                             */
                            start: string;
                            /**
                             * @description The end of the range as an ISO date string
                             * @example 2021-01-02T00:00:00Z
                             */
                            end: string;
                            /**
                             * @description The size of the bins, or points, in a chart
                             * @example day
                             * @enum {string}
                             */
                            period: "day" | "week" | "month";
                            /**
                             * @description The browser's timezone
                             * @example America/New_York
                             */
                            tz: string;
                        };
                        /** @description Event filters for the chart. */
                        eventFilters?: {
                            /** @description The name of the event.  Can be "Any Event" to match any event. */
                            event_name: string;
                            /** @description If specified the event must have all the property/values specified.  User traits on the event are also valid. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /**
                             * @description If specified, the event must have occurred within this time range.
                             * @example {
                             *       "start": "2021-01-01T00:00:00Z",
                             *       "end": "2021-01-02T00:00:00Z"
                             *     }
                             */
                            within?: {
                                /**
                                 * @description The start of the time range as an ISO date string
                                 * @example 2021-01-01T00:00:00Z
                                 */
                                start?: string;
                                /**
                                 * @description The end of the time range as an ISO date string
                                 * @example 2021-01-02T00:00:00Z
                                 */
                                end?: string;
                                /**
                                 * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                 * @example {
                                 *       "number": 1,
                                 *       "unit": "day",
                                 *       "tz": "America/New_York"
                                 *     }
                                 */
                                period?: {
                                    /**
                                     * @description The number of time units
                                     * @example 1
                                     */
                                    number: number;
                                    /**
                                     * @description The time unit
                                     * @example day
                                     * @enum {string}
                                     */
                                    unit: "day" | "week" | "month";
                                    /**
                                     * @description The timezone
                                     * @example America/New_York
                                     */
                                    tz: string;
                                };
                            };
                            /** @description If specified, the events will be grouped by this property for the values specified. */
                            groupBy?: {
                                property_name: string;
                                property_values: (string | number | boolean)[];
                            };
                            /** @description If specified, the number of events of this type that must have occurred within the time range. The default is 1. */
                            number_of?: number;
                            /**
                             * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                             * @enum {string}
                             */
                            number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                            /**
                             * @description If specified, the operation to use when combining any previous event filters.  Defaults to "and".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or" | "then";
                        }[];
                        /** @description User filters for the chart. */
                        userFilters?: {
                            /** @description The name of the cohort.  Can be "All Users" to match any user. */
                            cohort?: string;
                            /** @description If specified, the user must have the trait/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /** @description If specified, the user must have expressed the intents. */
                            shown_intents?: {
                                /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                                intent: string;
                                /** @description If specified, the intent must have the attribute/values specified. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the intent must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /** @description If specified, the user must have performed the events. */
                            performed_events?: {
                                /** @description The name of the event.  Can be "Any Event" to match any event. */
                                event_name: string;
                                /** @description If specified the event must have all the property/values specified.  User traits on the event are also valid. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the event must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the events will be grouped by this property for the values specified. */
                                groupBy?: {
                                    property_name: string;
                                    property_values: (string | number | boolean)[];
                                };
                                /** @description If specified, the number of events of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous event filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /**
                             * @description If specified, the operation to use when combining any previous user filters.  Defaults to "or".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or";
                        }[];
                        /** @description Users who have shown this intent. */
                        shownIntents?: {
                            /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                            intent: string;
                            /** @description If specified, the intent must have the attribute/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /**
                             * @description If specified, the intent must have occurred within this time range.
                             * @example {
                             *       "start": "2021-01-01T00:00:00Z",
                             *       "end": "2021-01-02T00:00:00Z"
                             *     }
                             */
                            within?: {
                                /**
                                 * @description The start of the time range as an ISO date string
                                 * @example 2021-01-01T00:00:00Z
                                 */
                                start?: string;
                                /**
                                 * @description The end of the time range as an ISO date string
                                 * @example 2021-01-02T00:00:00Z
                                 */
                                end?: string;
                                /**
                                 * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                 * @example {
                                 *       "number": 1,
                                 *       "unit": "day",
                                 *       "tz": "America/New_York"
                                 *     }
                                 */
                                period?: {
                                    /**
                                     * @description The number of time units
                                     * @example 1
                                     */
                                    number: number;
                                    /**
                                     * @description The time unit
                                     * @example day
                                     * @enum {string}
                                     */
                                    unit: "day" | "week" | "month";
                                    /**
                                     * @description The timezone
                                     * @example America/New_York
                                     */
                                    tz: string;
                                };
                            };
                            /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                            number_of?: number;
                            /**
                             * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                             * @enum {string}
                             */
                            number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                            /**
                             * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or" | "then";
                        }[];
                        /**
                         * @description Group by user trait.
                         * @example {
                         *       "trait_name": "gender",
                         *       "trait_values": [
                         *         "male",
                         *         "female"
                         *       ]
                         *     }
                         */
                        groupBy?: {
                            trait_name: string;
                            trait_values?: (string | number | boolean)[];
                        };
                    };
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Name of the chart */
                            chart_name: string;
                            /** @description Points of the session chart, if no group by was used. */
                            points?: {
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description Number of sessions in this period */
                                sessions: number;
                                /** @description Session ids in this period */
                                session_ids: string[];
                                /** @description Number of conversations in this period */
                                conversations: number;
                                /** @description Average session length in this period */
                                average_length: number;
                                /** @description Drilldown id for this point */
                                drilldown_id?: string;
                            }[];
                            /** @description Groups of points in the session chart, if group by was used. */
                            groups?: {
                                /** @description Group name */
                                group: string;
                                /** @description Points for the group */
                                points: {
                                    /** @description Start timestamp of the point */
                                    start: string;
                                    /** @description End timestamp of the point */
                                    end: string;
                                    /** @description Number of sessions in this period */
                                    sessions: number;
                                    /** @description Session ids in this period */
                                    session_ids: string[];
                                    /** @description Number of conversations in this period */
                                    conversations: number;
                                    /** @description Average session length in this period */
                                    average_length: number;
                                    /** @description Drilldown id for this point */
                                    drilldown_id?: string;
                                }[];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charts/user-composition-chart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a User Composition Chart
         * @description Get a User Composition Chart
         */
        get: {
            parameters: {
                query: {
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                    /** @description Chart Controls */
                    chartControls: {
                        /**
                         * @description Time range for the chart.
                         * @example {
                         *       "start": "2021-01-01T00:00:00Z",
                         *       "end": "2021-01-02T00:00:00Z",
                         *       "period": "day",
                         *       "tz": "America/New_York"
                         *     }
                         */
                        range: {
                            /**
                             * @description The start of the range as an ISO date string
                             * @example 2021-01-01T00:00:00Z
                             */
                            start: string;
                            /**
                             * @description The end of the range as an ISO date string
                             * @example 2021-01-02T00:00:00Z
                             */
                            end: string;
                            /**
                             * @description The size of the bins, or points, in a chart
                             * @example day
                             * @enum {string}
                             */
                            period: "day" | "week" | "month";
                            /**
                             * @description The browser's timezone
                             * @example America/New_York
                             */
                            tz: string;
                        };
                        /**
                         * @description The trait to group by.
                         * @example {
                         *       "trait_name": "gender",
                         *       "trait_values": [
                         *         "male",
                         *         "female"
                         *       ]
                         *     }
                         */
                        selectedTrait: {
                            trait_name: string;
                            trait_values?: (string | number | boolean)[];
                        };
                        /** @description User filters for the chart. */
                        userFilters?: {
                            /** @description The name of the cohort.  Can be "All Users" to match any user. */
                            cohort?: string;
                            /** @description If specified, the user must have the trait/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /** @description If specified, the user must have expressed the intents. */
                            shown_intents?: {
                                /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                                intent: string;
                                /** @description If specified, the intent must have the attribute/values specified. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the intent must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /** @description If specified, the user must have performed the events. */
                            performed_events?: {
                                /** @description The name of the event.  Can be "Any Event" to match any event. */
                                event_name: string;
                                /** @description If specified the event must have all the property/values specified.  User traits on the event are also valid. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the event must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the events will be grouped by this property for the values specified. */
                                groupBy?: {
                                    property_name: string;
                                    property_values: (string | number | boolean)[];
                                };
                                /** @description If specified, the number of events of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous event filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /**
                             * @description If specified, the operation to use when combining any previous user filters.  Defaults to "or".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or";
                        }[];
                        /** @description Users who have shown this intent. */
                        shownIntents?: {
                            /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                            intent: string;
                            /** @description If specified, the intent must have the attribute/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /**
                             * @description If specified, the intent must have occurred within this time range.
                             * @example {
                             *       "start": "2021-01-01T00:00:00Z",
                             *       "end": "2021-01-02T00:00:00Z"
                             *     }
                             */
                            within?: {
                                /**
                                 * @description The start of the time range as an ISO date string
                                 * @example 2021-01-01T00:00:00Z
                                 */
                                start?: string;
                                /**
                                 * @description The end of the time range as an ISO date string
                                 * @example 2021-01-02T00:00:00Z
                                 */
                                end?: string;
                                /**
                                 * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                 * @example {
                                 *       "number": 1,
                                 *       "unit": "day",
                                 *       "tz": "America/New_York"
                                 *     }
                                 */
                                period?: {
                                    /**
                                     * @description The number of time units
                                     * @example 1
                                     */
                                    number: number;
                                    /**
                                     * @description The time unit
                                     * @example day
                                     * @enum {string}
                                     */
                                    unit: "day" | "week" | "month";
                                    /**
                                     * @description The timezone
                                     * @example America/New_York
                                     */
                                    tz: string;
                                };
                            };
                            /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                            number_of?: number;
                            /**
                             * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                             * @enum {string}
                             */
                            number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                            /**
                             * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or" | "then";
                        }[];
                        /**
                         * @description Group by user trait.
                         * @example {
                         *       "trait_name": "gender",
                         *       "trait_values": [
                         *         "male",
                         *         "female"
                         *       ]
                         *     }
                         */
                        groupBy?: {
                            trait_name: string;
                            trait_values?: (string | number | boolean)[];
                        };
                    };
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Name of the chart */
                            chart_name: string;
                            /** @description Groups of pie charts, if group by was used. */
                            groups?: {
                                /** @description Group name */
                                group: string;
                                /** @description Pie chart for the group */
                                slices: {
                                    /** @description Label for the slice */
                                    label: string;
                                    /** @description Value for the slice */
                                    value: number;
                                    /** @description Percentage of the slice */
                                    percent: number;
                                    /** @description Drilldown id for this slice */
                                    drilldown_id?: string;
                                }[];
                            }[];
                            /** @description Pie chart, if no group by was used. */
                            slices?: {
                                /** @description Label for the slice */
                                label: string;
                                /** @description Value for the slice */
                                value: number;
                                /** @description Percentage of the slice */
                                percent: number;
                                /** @description Drilldown id for this slice */
                                drilldown_id?: string;
                            }[];
                            /** @description Highlights of the user composition chart, if not grouped. */
                            highlights?: {
                                /** @description Maximum percentage of a pie slice */
                                max_percent: number;
                                /** @description Minimum percentage of a pie slice */
                                min_percent: number;
                                /** @description Maximum count of a pie slice */
                                max_count: number;
                                /** @description Minimum count of a pie slice */
                                min_count: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charts/intent-distribution-chart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Intent Distribution Chart
         * @description Get a Intent Distribution Chart
         */
        get: {
            parameters: {
                query: {
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                    /** @description Chart Controls */
                    chartControls: {
                        /**
                         * @description Time range for the chart.
                         * @example {
                         *       "start": "2021-01-01T00:00:00Z",
                         *       "end": "2021-01-02T00:00:00Z",
                         *       "period": "day",
                         *       "tz": "America/New_York"
                         *     }
                         */
                        range: {
                            /**
                             * @description The start of the range as an ISO date string
                             * @example 2021-01-01T00:00:00Z
                             */
                            start: string;
                            /**
                             * @description The end of the range as an ISO date string
                             * @example 2021-01-02T00:00:00Z
                             */
                            end: string;
                            /**
                             * @description The size of the bins, or points, in a chart
                             * @example day
                             * @enum {string}
                             */
                            period: "day" | "week" | "month";
                            /**
                             * @description The browser's timezone
                             * @example America/New_York
                             */
                            tz: string;
                        };
                        /** @description User filters for the chart. */
                        userFilters?: {
                            /** @description The name of the cohort.  Can be "All Users" to match any user. */
                            cohort?: string;
                            /** @description If specified, the user must have the trait/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /** @description If specified, the user must have expressed the intents. */
                            shown_intents?: {
                                /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                                intent: string;
                                /** @description If specified, the intent must have the attribute/values specified. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the intent must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /** @description If specified, the user must have performed the events. */
                            performed_events?: {
                                /** @description The name of the event.  Can be "Any Event" to match any event. */
                                event_name: string;
                                /** @description If specified the event must have all the property/values specified.  User traits on the event are also valid. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the event must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the events will be grouped by this property for the values specified. */
                                groupBy?: {
                                    property_name: string;
                                    property_values: (string | number | boolean)[];
                                };
                                /** @description If specified, the number of events of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous event filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /**
                             * @description If specified, the operation to use when combining any previous user filters.  Defaults to "or".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or";
                        }[];
                        /**
                         * @description Group by user trait.
                         * @example {
                         *       "trait_name": "gender",
                         *       "trait_values": [
                         *         "male",
                         *         "female"
                         *       ]
                         *     }
                         */
                        groupBy?: {
                            trait_name: string;
                            trait_values?: (string | number | boolean)[];
                        };
                    };
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Name of the chart */
                            chart_name: string;
                            /** @description Groups of pie charts, if group by was used. */
                            groups?: {
                                /** @description Group name */
                                group: string;
                                /** @description Slices for the group */
                                slices: {
                                    /** @description Label for the slice */
                                    label: string;
                                    /** @description Value for the slice */
                                    value: number;
                                    /** @description Percentage of the slice */
                                    percent: number;
                                    /** @description Drilldown id for this slice */
                                    drilldown_id?: string;
                                }[];
                            }[];
                            /** @description Slices of the pie chart, if no group by was used. */
                            slices?: {
                                /** @description Label for the slice */
                                label: string;
                                /** @description Value for the slice */
                                value: number;
                                /** @description Percentage of the slice */
                                percent: number;
                                /** @description Drilldown id for this slice */
                                drilldown_id?: string;
                            }[];
                            /** @description Highlights of the intent distribution chart, if not grouped. */
                            highlights?: {
                                /** @description Maximum percentage of a pie slice */
                                max_percent: number;
                                /** @description Minimum percentage of a pie slice */
                                min_percent: number;
                                /** @description Maximum count of a pie slice */
                                max_count: number;
                                /** @description Minimum count of a pie slice */
                                min_count: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charts/funnel-chart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Funnel Chart
         * @description Get a Funnel Chart
         */
        get: {
            parameters: {
                query: {
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                    /** @description Chart Controls */
                    chartControls: {
                        /**
                         * @description Time range for the chart.
                         * @example {
                         *       "start": "2021-01-01T00:00:00Z",
                         *       "end": "2021-01-02T00:00:00Z",
                         *       "period": "day",
                         *       "tz": "America/New_York"
                         *     }
                         */
                        range: {
                            /**
                             * @description The start of the range as an ISO date string
                             * @example 2021-01-01T00:00:00Z
                             */
                            start: string;
                            /**
                             * @description The end of the range as an ISO date string
                             * @example 2021-01-02T00:00:00Z
                             */
                            end: string;
                            /**
                             * @description The size of the bins, or points, in a chart
                             * @example day
                             * @enum {string}
                             */
                            period: "day" | "week" | "month";
                            /**
                             * @description The browser's timezone
                             * @example America/New_York
                             */
                            tz: string;
                        };
                        /** @description Event filters for the funnel. */
                        eventFilters: {
                            /** @description The name of the event.  Can be "Any Event" to match any event. */
                            event_name: string;
                            /** @description If specified the event must have all the property/values specified.  User traits on the event are also valid. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /**
                             * @description If specified, the event must have occurred within this time range.
                             * @example {
                             *       "start": "2021-01-01T00:00:00Z",
                             *       "end": "2021-01-02T00:00:00Z"
                             *     }
                             */
                            within?: {
                                /**
                                 * @description The start of the time range as an ISO date string
                                 * @example 2021-01-01T00:00:00Z
                                 */
                                start?: string;
                                /**
                                 * @description The end of the time range as an ISO date string
                                 * @example 2021-01-02T00:00:00Z
                                 */
                                end?: string;
                                /**
                                 * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                 * @example {
                                 *       "number": 1,
                                 *       "unit": "day",
                                 *       "tz": "America/New_York"
                                 *     }
                                 */
                                period?: {
                                    /**
                                     * @description The number of time units
                                     * @example 1
                                     */
                                    number: number;
                                    /**
                                     * @description The time unit
                                     * @example day
                                     * @enum {string}
                                     */
                                    unit: "day" | "week" | "month";
                                    /**
                                     * @description The timezone
                                     * @example America/New_York
                                     */
                                    tz: string;
                                };
                            };
                            /** @description If specified, the events will be grouped by this property for the values specified. */
                            groupBy?: {
                                property_name: string;
                                property_values: (string | number | boolean)[];
                            };
                            /** @description If specified, the number of events of this type that must have occurred within the time range. The default is 1. */
                            number_of?: number;
                            /**
                             * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                             * @enum {string}
                             */
                            number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                            /**
                             * @description If specified, the operation to use when combining any previous event filters.  Defaults to "and".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or" | "then";
                        }[];
                        /** @description User filters for the funnel. */
                        userFilters?: {
                            /** @description The name of the cohort.  Can be "All Users" to match any user. */
                            cohort?: string;
                            /** @description If specified, the user must have the trait/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /** @description If specified, the user must have expressed the intents. */
                            shown_intents?: {
                                /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                                intent: string;
                                /** @description If specified, the intent must have the attribute/values specified. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the intent must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /** @description If specified, the user must have performed the events. */
                            performed_events?: {
                                /** @description The name of the event.  Can be "Any Event" to match any event. */
                                event_name: string;
                                /** @description If specified the event must have all the property/values specified.  User traits on the event are also valid. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the event must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the events will be grouped by this property for the values specified. */
                                groupBy?: {
                                    property_name: string;
                                    property_values: (string | number | boolean)[];
                                };
                                /** @description If specified, the number of events of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous event filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /**
                             * @description If specified, the operation to use when combining any previous user filters.  Defaults to "or".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or";
                        }[];
                        /** @description Users who have shown this intent. */
                        shownIntents?: {
                            /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                            intent: string;
                            /** @description If specified, the intent must have the attribute/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /**
                             * @description If specified, the intent must have occurred within this time range.
                             * @example {
                             *       "start": "2021-01-01T00:00:00Z",
                             *       "end": "2021-01-02T00:00:00Z"
                             *     }
                             */
                            within?: {
                                /**
                                 * @description The start of the time range as an ISO date string
                                 * @example 2021-01-01T00:00:00Z
                                 */
                                start?: string;
                                /**
                                 * @description The end of the time range as an ISO date string
                                 * @example 2021-01-02T00:00:00Z
                                 */
                                end?: string;
                                /**
                                 * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                 * @example {
                                 *       "number": 1,
                                 *       "unit": "day",
                                 *       "tz": "America/New_York"
                                 *     }
                                 */
                                period?: {
                                    /**
                                     * @description The number of time units
                                     * @example 1
                                     */
                                    number: number;
                                    /**
                                     * @description The time unit
                                     * @example day
                                     * @enum {string}
                                     */
                                    unit: "day" | "week" | "month";
                                    /**
                                     * @description The timezone
                                     * @example America/New_York
                                     */
                                    tz: string;
                                };
                            };
                            /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                            number_of?: number;
                            /**
                             * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                             * @enum {string}
                             */
                            number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                            /**
                             * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or" | "then";
                        }[];
                        /**
                         * @description Group by user trait.
                         * @example {
                         *       "trait_name": "gender",
                         *       "trait_values": [
                         *         "male",
                         *         "female"
                         *       ]
                         *     }
                         */
                        groupBy?: {
                            trait_name: string;
                            trait_values?: (string | number | boolean)[];
                        };
                    };
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Name of the chart. */
                            chart_name: string;
                            /** @description Events in the funnel, if no group by was specified. */
                            events?: {
                                /** @description Event name. */
                                event: string;
                                /** @description Number of users that completed this event. */
                                count: number;
                                /** @description Percentage of users that completed this event with respect to the starting event users. */
                                percent: number;
                                /** @description Drilldown id for this event. */
                                drilldown_id?: string;
                            }[];
                            /** @description Groups of events in the funnel, if group by was specified. */
                            groups?: {
                                /** @description Group name. */
                                group: string;
                                /** @description Events in the funnel, for this group. */
                                events: {
                                    /** @description Event name. */
                                    event: string;
                                    /** @description Number of users that completed this event. */
                                    count: number;
                                    /** @description Percentage of users that completed this event with respect to the starting event users. */
                                    percent: number;
                                    /** @description Drilldown id for this event. */
                                    drilldown_id?: string;
                                }[];
                            }[];
                            /** @description Highlights of the funnel chart, if not grouped */
                            highlights?: {
                                /** @description Number of users in the funnel. */
                                number_of_users: number;
                                /** @description Conversion rate of the funnel. */
                                conversion_rate: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charts/conversation-analysis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Conversation Analysis
         * @description Get a Conversation Analysis
         */
        get: {
            parameters: {
                query: {
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                    /** @description Chart Controls */
                    chartControls: {
                        /**
                         * @description Time range for the chart.
                         * @example {
                         *       "start": "2021-01-01T00:00:00Z",
                         *       "end": "2021-01-02T00:00:00Z",
                         *       "period": "day",
                         *       "tz": "America/New_York"
                         *     }
                         */
                        range: {
                            /**
                             * @description The start of the range as an ISO date string
                             * @example 2021-01-01T00:00:00Z
                             */
                            start: string;
                            /**
                             * @description The end of the range as an ISO date string
                             * @example 2021-01-02T00:00:00Z
                             */
                            end: string;
                            /**
                             * @description The size of the bins, or points, in a chart
                             * @example day
                             * @enum {string}
                             */
                            period: "day" | "week" | "month";
                            /**
                             * @description The browser's timezone
                             * @example America/New_York
                             */
                            tz: string;
                        };
                        /** @description User filters for the chart. */
                        userFilters?: {
                            /** @description The name of the cohort.  Can be "All Users" to match any user. */
                            cohort?: string;
                            /** @description If specified, the user must have the trait/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /** @description If specified, the user must have expressed the intents. */
                            shown_intents?: {
                                /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                                intent: string;
                                /** @description If specified, the intent must have the attribute/values specified. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the intent must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /** @description If specified, the user must have performed the events. */
                            performed_events?: {
                                /** @description The name of the event.  Can be "Any Event" to match any event. */
                                event_name: string;
                                /** @description If specified the event must have all the property/values specified.  User traits on the event are also valid. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the event must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the events will be grouped by this property for the values specified. */
                                groupBy?: {
                                    property_name: string;
                                    property_values: (string | number | boolean)[];
                                };
                                /** @description If specified, the number of events of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous event filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /**
                             * @description If specified, the operation to use when combining any previous user filters.  Defaults to "or".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or";
                        }[];
                        /** @description Users who have shown this intent. */
                        shownIntents?: {
                            /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                            intent: string;
                            /** @description If specified, the intent must have the attribute/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /**
                             * @description If specified, the intent must have occurred within this time range.
                             * @example {
                             *       "start": "2021-01-01T00:00:00Z",
                             *       "end": "2021-01-02T00:00:00Z"
                             *     }
                             */
                            within?: {
                                /**
                                 * @description The start of the time range as an ISO date string
                                 * @example 2021-01-01T00:00:00Z
                                 */
                                start?: string;
                                /**
                                 * @description The end of the time range as an ISO date string
                                 * @example 2021-01-02T00:00:00Z
                                 */
                                end?: string;
                                /**
                                 * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                 * @example {
                                 *       "number": 1,
                                 *       "unit": "day",
                                 *       "tz": "America/New_York"
                                 *     }
                                 */
                                period?: {
                                    /**
                                     * @description The number of time units
                                     * @example 1
                                     */
                                    number: number;
                                    /**
                                     * @description The time unit
                                     * @example day
                                     * @enum {string}
                                     */
                                    unit: "day" | "week" | "month";
                                    /**
                                     * @description The timezone
                                     * @example America/New_York
                                     */
                                    tz: string;
                                };
                            };
                            /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                            number_of?: number;
                            /**
                             * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                             * @enum {string}
                             */
                            number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                            /**
                             * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or" | "then";
                        }[];
                        /**
                         * @description Group by user trait.
                         * @example {
                         *       "trait_name": "gender",
                         *       "trait_values": [
                         *         "male",
                         *         "female"
                         *       ]
                         *     }
                         */
                        groupBy?: {
                            trait_name: string;
                            trait_values?: (string | number | boolean)[];
                        };
                        /**
                         * @description Analysis option
                         * @enum {string}
                         */
                        analyse: "intentConversion" | "firstIntentFriction" | "newIntents" | "sentiment" | "duration" | "prompts";
                    };
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Name of the chart */
                            chart_name: string;
                            /** @description Points of the chart, if no group by was used. */
                            points?: ({
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description Drilldown id for this point */
                                drilldown_id?: string;
                                /** @description Conversion percent */
                                conversion: number;
                                /** @description Total fulfilled intents */
                                count: number;
                            } | {
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description Drilldown id for this point */
                                drilldown_id?: string;
                                /** @description Average first fulfilled intent friction */
                                average_friction_percent: number;
                            } | {
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description Drilldown id for this point */
                                drilldown_id?: string;
                                /** @description Unique users who expressed these intents */
                                unique_users: number;
                                /** @description Total new intents */
                                new_intents: number;
                                /** @description Number of new intents expressed / Number of unique users */
                                average: number;
                            } | {
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description Drilldown id for this point */
                                drilldown_id?: string;
                                /** @description Total sentiments */
                                count: number;
                            } | {
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description Drilldown id for this point */
                                drilldown_id?: string;
                                /** @description Average duration/conversation in seconds */
                                average_sec: number;
                                /** @description Total duration of all conversations in seconds */
                                total_sec: number;
                            } | {
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description Drilldown id for this point */
                                drilldown_id?: string;
                                /** @description Total prompts */
                                total: number;
                                /** @description Average duration of each prompt in seconds */
                                average_sec: number;
                            })[];
                            /** @description Groups of points in the chart, if group by was used. */
                            groups?: {
                                /** @description Group name */
                                group: string;
                                /** @description Points for the group */
                                points: ({
                                    /** @description Start timestamp of the point */
                                    start: string;
                                    /** @description End timestamp of the point */
                                    end: string;
                                    /** @description Drilldown id for this point */
                                    drilldown_id?: string;
                                    /** @description Conversion percent */
                                    conversion: number;
                                    /** @description Total fulfilled intents */
                                    count: number;
                                } | {
                                    /** @description Start timestamp of the point */
                                    start: string;
                                    /** @description End timestamp of the point */
                                    end: string;
                                    /** @description Drilldown id for this point */
                                    drilldown_id?: string;
                                    /** @description Average first fulfilled intent friction */
                                    average_friction_percent: number;
                                } | {
                                    /** @description Start timestamp of the point */
                                    start: string;
                                    /** @description End timestamp of the point */
                                    end: string;
                                    /** @description Drilldown id for this point */
                                    drilldown_id?: string;
                                    /** @description Unique users who expressed these intents */
                                    unique_users: number;
                                    /** @description Total new intents */
                                    new_intents: number;
                                    /** @description Number of new intents expressed / Number of unique users */
                                    average: number;
                                } | {
                                    /** @description Start timestamp of the point */
                                    start: string;
                                    /** @description End timestamp of the point */
                                    end: string;
                                    /** @description Drilldown id for this point */
                                    drilldown_id?: string;
                                    /** @description Total sentiments */
                                    count: number;
                                } | {
                                    /** @description Start timestamp of the point */
                                    start: string;
                                    /** @description End timestamp of the point */
                                    end: string;
                                    /** @description Drilldown id for this point */
                                    drilldown_id?: string;
                                    /** @description Average duration/conversation in seconds */
                                    average_sec: number;
                                    /** @description Total duration of all conversations in seconds */
                                    total_sec: number;
                                } | {
                                    /** @description Start timestamp of the point */
                                    start: string;
                                    /** @description End timestamp of the point */
                                    end: string;
                                    /** @description Drilldown id for this point */
                                    drilldown_id?: string;
                                    /** @description Total prompts */
                                    total: number;
                                    /** @description Average duration of each prompt in seconds */
                                    average_sec: number;
                                })[];
                            }[];
                            /** @description Highlights of the chart, if not grouped. */
                            highlights: {
                                /** @description Conversion percent */
                                conversion: number;
                                /** @description Total fulfilled intents */
                                count: number;
                            } | {
                                /** @description Average first fulfilled intent friction */
                                average_friction_percent: number;
                                /** @description Total conversations */
                                total_conversations: number;
                                /** @description Total first intents fulfilled */
                                total_first_intents_fulfilled: number;
                            } | {
                                /** @description Unique users who expressed these intents */
                                unique_users: number;
                                /** @description Total new intents */
                                new_intents: number;
                                /** @description Number of new intents expressed / Number of unique users */
                                average: number;
                            } | {
                                /** @description Total sentiments */
                                count: number;
                                /** @description Positive sentiment for the period */
                                positive: number;
                                /** @description Negative sentiment for the period */
                                negative: number;
                                /** @description Neutral sentiment for the period */
                                neutral: number;
                            } | {
                                /** @description Average duration/conversation in seconds */
                                average_sec: number;
                                /** @description Total duration of all conversations in seconds */
                                total_sec: number;
                            } | {
                                /** @description Total prompts */
                                total: number;
                                /** @description Average duration of each prompt in seconds */
                                average_sec: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charts/intent-analysis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Intent Analysis
         * @description Get a Intent Analysis
         */
        get: {
            parameters: {
                query: {
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                    /** @description Chart Controls */
                    chartControls: {
                        /**
                         * @description Time range for the chart.
                         * @example {
                         *       "start": "2021-01-01T00:00:00Z",
                         *       "end": "2021-01-02T00:00:00Z",
                         *       "period": "day",
                         *       "tz": "America/New_York"
                         *     }
                         */
                        range: {
                            /**
                             * @description The start of the range as an ISO date string
                             * @example 2021-01-01T00:00:00Z
                             */
                            start: string;
                            /**
                             * @description The end of the range as an ISO date string
                             * @example 2021-01-02T00:00:00Z
                             */
                            end: string;
                            /**
                             * @description The size of the bins, or points, in a chart
                             * @example day
                             * @enum {string}
                             */
                            period: "day" | "week" | "month";
                            /**
                             * @description The browser's timezone
                             * @example America/New_York
                             */
                            tz: string;
                        };
                        /** @description User filters for the chart. */
                        userFilters?: {
                            /** @description The name of the cohort.  Can be "All Users" to match any user. */
                            cohort?: string;
                            /** @description If specified, the user must have the trait/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /** @description If specified, the user must have expressed the intents. */
                            shown_intents?: {
                                /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                                intent: string;
                                /** @description If specified, the intent must have the attribute/values specified. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the intent must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /** @description If specified, the user must have performed the events. */
                            performed_events?: {
                                /** @description The name of the event.  Can be "Any Event" to match any event. */
                                event_name: string;
                                /** @description If specified the event must have all the property/values specified.  User traits on the event are also valid. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the event must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the events will be grouped by this property for the values specified. */
                                groupBy?: {
                                    property_name: string;
                                    property_values: (string | number | boolean)[];
                                };
                                /** @description If specified, the number of events of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous event filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /**
                             * @description If specified, the operation to use when combining any previous user filters.  Defaults to "or".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or";
                        }[];
                        /** @description Users who have shown this intent. */
                        shownIntents?: {
                            /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                            intent: string;
                            /** @description If specified, the intent must have the attribute/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /**
                             * @description If specified, the intent must have occurred within this time range.
                             * @example {
                             *       "start": "2021-01-01T00:00:00Z",
                             *       "end": "2021-01-02T00:00:00Z"
                             *     }
                             */
                            within?: {
                                /**
                                 * @description The start of the time range as an ISO date string
                                 * @example 2021-01-01T00:00:00Z
                                 */
                                start?: string;
                                /**
                                 * @description The end of the time range as an ISO date string
                                 * @example 2021-01-02T00:00:00Z
                                 */
                                end?: string;
                                /**
                                 * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                 * @example {
                                 *       "number": 1,
                                 *       "unit": "day",
                                 *       "tz": "America/New_York"
                                 *     }
                                 */
                                period?: {
                                    /**
                                     * @description The number of time units
                                     * @example 1
                                     */
                                    number: number;
                                    /**
                                     * @description The time unit
                                     * @example day
                                     * @enum {string}
                                     */
                                    unit: "day" | "week" | "month";
                                    /**
                                     * @description The timezone
                                     * @example America/New_York
                                     */
                                    tz: string;
                                };
                            };
                            /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                            number_of?: number;
                            /**
                             * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                             * @enum {string}
                             */
                            number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                            /**
                             * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or" | "then";
                        }[];
                        /**
                         * @description Group by user trait.
                         * @example {
                         *       "trait_name": "gender",
                         *       "trait_values": [
                         *         "male",
                         *         "female"
                         *       ]
                         *     }
                         */
                        groupBy?: {
                            trait_name: string;
                            trait_values?: (string | number | boolean)[];
                        };
                        /**
                         * @description Analysis option
                         * @enum {string}
                         */
                        analyse: "intentFulfillmentFriction" | "intentFulfillmentRate" | "intentFulfillmentSentiment" | "intentAcceptanceRate" | "attributeAcceptanceRate" | "intentFulfillmentEfficiency";
                    };
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Name of the chart */
                            chart_name: string;
                            /** @description Points of the chart, if no group by was used. */
                            points?: ({
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description Drilldown id for this point */
                                drilldown_id?: string;
                                /** @description Average number of turns per fulfilled intents */
                                average_number_turns_per_fulfilled: number;
                                /** @description Total number of turns per fulfilled intents */
                                total_turns_for_fulfilled_intents: number;
                            } | {
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description Drilldown id for this point */
                                drilldown_id?: string;
                                /** @description Fulfillment rate */
                                conversion_percent: number;
                                /** @description Number of intents */
                                count: number;
                            } | {
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description Drilldown id for this point */
                                drilldown_id?: string;
                                /** @description Number of fulfilled intents */
                                count: number;
                            } | {
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description Drilldown id for this point */
                                drilldown_id?: string;
                                /** @description Acceptance rate */
                                conversion_percent: number;
                                /** @description Number of intents */
                                count: number;
                            } | {
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description Drilldown id for this point */
                                drilldown_id?: string;
                                /** @description Acceptance rate */
                                conversion_percent: number;
                                /** @description Number of intents */
                                count: number;
                            } | {
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description Drilldown id for this point */
                                drilldown_id?: string;
                                /** @description Fulfillment efficiency */
                                conversion_percent: number;
                            })[];
                            /** @description Groups of points in the chart, if group by was used. */
                            groups?: {
                                /** @description Group name */
                                group: string;
                                /** @description Points for the group */
                                points: ({
                                    /** @description Start timestamp of the point */
                                    start: string;
                                    /** @description End timestamp of the point */
                                    end: string;
                                    /** @description Drilldown id for this point */
                                    drilldown_id?: string;
                                    /** @description Average number of turns per fulfilled intents */
                                    average_number_turns_per_fulfilled: number;
                                    /** @description Total number of turns per fulfilled intents */
                                    total_turns_for_fulfilled_intents: number;
                                } | {
                                    /** @description Start timestamp of the point */
                                    start: string;
                                    /** @description End timestamp of the point */
                                    end: string;
                                    /** @description Drilldown id for this point */
                                    drilldown_id?: string;
                                    /** @description Fulfillment rate */
                                    conversion_percent: number;
                                    /** @description Number of intents */
                                    count: number;
                                } | {
                                    /** @description Start timestamp of the point */
                                    start: string;
                                    /** @description End timestamp of the point */
                                    end: string;
                                    /** @description Drilldown id for this point */
                                    drilldown_id?: string;
                                    /** @description Number of fulfilled intents */
                                    count: number;
                                } | {
                                    /** @description Start timestamp of the point */
                                    start: string;
                                    /** @description End timestamp of the point */
                                    end: string;
                                    /** @description Drilldown id for this point */
                                    drilldown_id?: string;
                                    /** @description Acceptance rate */
                                    conversion_percent: number;
                                    /** @description Number of intents */
                                    count: number;
                                } | {
                                    /** @description Start timestamp of the point */
                                    start: string;
                                    /** @description End timestamp of the point */
                                    end: string;
                                    /** @description Drilldown id for this point */
                                    drilldown_id?: string;
                                    /** @description Acceptance rate */
                                    conversion_percent: number;
                                    /** @description Number of intents */
                                    count: number;
                                } | {
                                    /** @description Start timestamp of the point */
                                    start: string;
                                    /** @description End timestamp of the point */
                                    end: string;
                                    /** @description Drilldown id for this point */
                                    drilldown_id?: string;
                                    /** @description Fulfillment efficiency */
                                    conversion_percent: number;
                                })[];
                            }[];
                            /** @description Highlights of the chart, if not grouped. */
                            highlights: {
                                /** @description Average number of turns per fulfilled intents */
                                average_number_turns_per_fulfilled: number;
                                /** @description Number of unique fulfilled intents */
                                unique_fulfilled_intents: number;
                                /** @description Total number of fulfilled intents */
                                total_fulfilled_intents: number;
                            } | {
                                /** @description Average fulfillment rate */
                                average_fulfillment_rate: number;
                                /** @description Number of unique fulfilled intents */
                                unique_fulfilled_intents: number;
                                /** @description Total number of fulfilled intents */
                                total_fulfilled_intents: number;
                            } | {
                                /** @description Number of positive intents */
                                positive_count: number;
                                /** @description Number of negative intents */
                                negative_count: number;
                                /** @description Number of neutral intents */
                                neutral_count: number;
                                /** @description Number of unique fulfilled intents */
                                unique_fulfilled_intents: number;
                                /** @description Total number of fulfilled intents */
                                total_fulfilled_intents: number;
                            } | {
                                /** @description Total number of intents offered */
                                total_intents_offered: number;
                                /** @description Number of unique intents offered */
                                unique_intents_offered: number;
                                /** @description Average acceptance rate */
                                average_acceptance_rate: number;
                            } | {
                                /** @description Total number of attributes offered */
                                total_attributes_offered: number;
                                /** @description Number of unique attributes offered */
                                unique_attributes_offered: number;
                                /** @description Average acceptance rate */
                                average_acceptance_rate: number;
                            } | {
                                /** @description Total number of intents fulfilled */
                                total_intents_fulfilled: number;
                                /** @description Number of unique intents fulfilled */
                                unique_intents_fulfilled: number;
                                /** @description Average number of turns to fulfill */
                                average_number_turns_to_fulfill: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charts/sentiment-analysis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Sentiment Analysis
         * @description Get a Sentiment Analysis
         */
        get: {
            parameters: {
                query: {
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                    /** @description Chart Controls */
                    chartControls: {
                        /**
                         * @description Time range for the chart
                         * @example {
                         *       "start": "2021-01-01T00:00:00Z",
                         *       "end": "2021-01-02T00:00:00Z",
                         *       "period": "day",
                         *       "tz": "America/New_York"
                         *     }
                         */
                        range: {
                            /**
                             * @description The start of the range as an ISO date string
                             * @example 2021-01-01T00:00:00Z
                             */
                            start: string;
                            /**
                             * @description The end of the range as an ISO date string
                             * @example 2021-01-02T00:00:00Z
                             */
                            end: string;
                            /**
                             * @description The size of the bins, or points, in a chart
                             * @example day
                             * @enum {string}
                             */
                            period: "day" | "week" | "month";
                            /**
                             * @description The browser's timezone
                             * @example America/New_York
                             */
                            tz: string;
                        };
                        /**
                         * @description Intent(s) to consider
                         * @example {
                         *       "intent": "intent_name",
                         *       "with": [
                         *         {
                         *           "property_name": "attribute_name",
                         *           "operator": "eq",
                         *           "values": [
                         *             "attribute_value"
                         *           ]
                         *         }
                         *       ],
                         *       "within": {
                         *         "start": "2021-01-01T00:00:00Z",
                         *         "end": "2021-01-02T00:00:00Z"
                         *       }
                         *     }
                         */
                        intentFilter: {
                            /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                            intent: string;
                            /** @description If specified, the intent must have the attribute/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /**
                             * @description If specified, the intent must have occurred within this time range.
                             * @example {
                             *       "start": "2021-01-01T00:00:00Z",
                             *       "end": "2021-01-02T00:00:00Z"
                             *     }
                             */
                            within?: {
                                /**
                                 * @description The start of the time range as an ISO date string
                                 * @example 2021-01-01T00:00:00Z
                                 */
                                start?: string;
                                /**
                                 * @description The end of the time range as an ISO date string
                                 * @example 2021-01-02T00:00:00Z
                                 */
                                end?: string;
                                /**
                                 * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                 * @example {
                                 *       "number": 1,
                                 *       "unit": "day",
                                 *       "tz": "America/New_York"
                                 *     }
                                 */
                                period?: {
                                    /**
                                     * @description The number of time units
                                     * @example 1
                                     */
                                    number: number;
                                    /**
                                     * @description The time unit
                                     * @example day
                                     * @enum {string}
                                     */
                                    unit: "day" | "week" | "month";
                                    /**
                                     * @description The timezone
                                     * @example America/New_York
                                     */
                                    tz: string;
                                };
                            };
                            /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                            number_of?: number;
                            /**
                             * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                             * @enum {string}
                             */
                            number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                            /**
                             * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or" | "then";
                        };
                        /** @description Filter users */
                        userFilters?: {
                            /** @description The name of the cohort.  Can be "All Users" to match any user. */
                            cohort?: string;
                            /** @description If specified, the user must have the trait/values specified. */
                            with?: {
                                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                property_name: string;
                                /**
                                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                 * @example eq
                                 * @enum {string}
                                 */
                                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                values: (string | number | boolean)[];
                            }[];
                            /** @description If specified, the user must have expressed the intents. */
                            shown_intents?: {
                                /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
                                intent: string;
                                /** @description If specified, the intent must have the attribute/values specified. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the intent must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous intent filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /** @description If specified, the user must have performed the events. */
                            performed_events?: {
                                /** @description The name of the event.  Can be "Any Event" to match any event. */
                                event_name: string;
                                /** @description If specified the event must have all the property/values specified.  User traits on the event are also valid. */
                                with?: {
                                    /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                                    property_name: string;
                                    /**
                                     * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                                     * @example eq
                                     * @enum {string}
                                     */
                                    operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                                    /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                                    values: (string | number | boolean)[];
                                }[];
                                /**
                                 * @description If specified, the event must have occurred within this time range.
                                 * @example {
                                 *       "start": "2021-01-01T00:00:00Z",
                                 *       "end": "2021-01-02T00:00:00Z"
                                 *     }
                                 */
                                within?: {
                                    /**
                                     * @description The start of the time range as an ISO date string
                                     * @example 2021-01-01T00:00:00Z
                                     */
                                    start?: string;
                                    /**
                                     * @description The end of the time range as an ISO date string
                                     * @example 2021-01-02T00:00:00Z
                                     */
                                    end?: string;
                                    /**
                                     * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                                     * @example {
                                     *       "number": 1,
                                     *       "unit": "day",
                                     *       "tz": "America/New_York"
                                     *     }
                                     */
                                    period?: {
                                        /**
                                         * @description The number of time units
                                         * @example 1
                                         */
                                        number: number;
                                        /**
                                         * @description The time unit
                                         * @example day
                                         * @enum {string}
                                         */
                                        unit: "day" | "week" | "month";
                                        /**
                                         * @description The timezone
                                         * @example America/New_York
                                         */
                                        tz: string;
                                    };
                                };
                                /** @description If specified, the events will be grouped by this property for the values specified. */
                                groupBy?: {
                                    property_name: string;
                                    property_values: (string | number | boolean)[];
                                };
                                /** @description If specified, the number of events of this type that must have occurred within the time range. The default is 1. */
                                number_of?: number;
                                /**
                                 * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
                                 * @enum {string}
                                 */
                                number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
                                /**
                                 * @description If specified, the operation to use when combining any previous event filters.  Defaults to "and".
                                 * @enum {string}
                                 */
                                combine_previous_operation?: "and" | "or" | "then";
                            }[];
                            /**
                             * @description If specified, the operation to use when combining any previous user filters.  Defaults to "or".
                             * @enum {string}
                             */
                            combine_previous_operation?: "and" | "or";
                        }[];
                        /**
                         * @description Group by user trait
                         * @example {
                         *       "trait_name": "gender",
                         *       "trait_values": [
                         *         "male",
                         *         "female"
                         *       ]
                         *     }
                         */
                        groupBy?: {
                            trait_name: string;
                            trait_values?: (string | number | boolean)[];
                        };
                    };
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Name of the chart */
                            chart_name: string;
                            /** @description Groups of pie charts, if group by was used. */
                            groups?: {
                                /** @description Group name */
                                group: string;
                                /** @description Slices for the group */
                                slices: {
                                    /** @description Label for the slice */
                                    label: string;
                                    /** @description Value for the slice */
                                    value: number;
                                    /** @description Percentage of the slice */
                                    percent: number;
                                    /** @description Drilldown id for this slice */
                                    drilldown_id?: string;
                                }[];
                            }[];
                            /** @description Slices of the pie chart, if no group by was used. */
                            slices?: {
                                /** @description Label for the slice */
                                label: string;
                                /** @description Value for the slice */
                                value: number;
                                /** @description Percentage of the slice */
                                percent: number;
                                /** @description Drilldown id for this slice */
                                drilldown_id?: string;
                            }[];
                            /** @description Highlights of the sentiment analysis chart, if not grouped. */
                            highlights?: {
                                /** @description Percentage of positive sentiment */
                                positive_percent: number;
                                /** @description Total count of positive sentiment */
                                positive_total: number;
                                /** @description Percentage of negative sentiment */
                                negative_percent: number;
                                /** @description Total count of negative sentiment */
                                negative_total: number;
                                /** @description Percentage of neutral sentiment */
                                neutral_percent: number;
                                /** @description Total count of neutral sentiment */
                                neutral_total: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agg/event-names": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Event Names
         * @description Get Event Names
         */
        get: {
            parameters: {
                query?: {
                    /** @description Event Regex */
                    event_regex?: string;
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Event Names */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agg/property-names": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Property Names
         * @description Get Property Names
         */
        get: {
            parameters: {
                query?: {
                    /** @description Event Regex */
                    event_regex?: string;
                    /** @description Existing Picks */
                    picks?: {
                        /** @description Previously picked proerty, trait or attribute name. */
                        name: string;
                        /** @description Previously picked property, trait or attribute value. */
                        value: string;
                    }[];
                    /** @description Property Regex */
                    property_regex?: string;
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Property Names */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agg/property-values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Property Values
         * @description Get Property Values
         */
        get: {
            parameters: {
                query?: {
                    /** @description Event Regex */
                    event_regex?: string;
                    /** @description Property Name Regex */
                    property_name_regex?: string;
                    /** @description Property Value Regex */
                    property_value_regex?: string;
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Property Values */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agg/trait-names": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Trait Names
         * @description Get Trait Names
         */
        get: {
            parameters: {
                query?: {
                    /** @description Event Regex */
                    event_regex?: string;
                    /** @description Existing Picks */
                    picks?: {
                        /** @description Previously picked proerty, trait or attribute name. */
                        name: string;
                        /** @description Previously picked property, trait or attribute value. */
                        value: string;
                    }[];
                    /** @description Trait Regex */
                    trait_regex?: string;
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Trait Names */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agg/trait-values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Trait Values
         * @description Get Trait Values
         */
        get: {
            parameters: {
                query?: {
                    /** @description Event Regex */
                    event_regex?: string;
                    /** @description Trait Name Regex */
                    trait_name_regex?: string;
                    /** @description Trait Value Regex */
                    trait_value_regex?: string;
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Trait Values */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agg/intent-names": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Intents
         * @description Get Intents
         */
        get: {
            parameters: {
                query?: {
                    /** @description Intent Regex */
                    intent_regex?: string;
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Intents */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agg/intent-attribute-names": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Intent Attribute Names
         * @description Get Intent Attribute Names
         */
        get: {
            parameters: {
                query?: {
                    /** @description Intent Regex */
                    intent_regex?: string;
                    /** @description Existing Picks */
                    picks?: {
                        /** @description Previously picked proerty, trait or attribute name. */
                        name: string;
                        /** @description Previously picked property, trait or attribute value. */
                        value: string;
                    }[];
                    /** @description Attribute Regex */
                    attribute_regex?: string;
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Intent Attribute Names */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agg/intent-attribute-values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Intent Attribute Values
         * @description Get Intent Attribute Values
         */
        get: {
            parameters: {
                query?: {
                    /** @description Intent Regex */
                    intent_regex?: string;
                    /** @description Attribute Name Regex */
                    attribute_name_regex?: string;
                    /** @description Attribute Value Regex */
                    attribute_value_regex?: string;
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Intent Attribute Values */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agg/user-trait-names": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Trait Names
         * @description Get User Trait Names
         */
        get: {
            parameters: {
                query?: {
                    /** @description ID Regex */
                    id_regex?: string;
                    /** @description Existing Picks */
                    picks?: {
                        /** @description Previously picked proerty, trait or attribute name. */
                        name: string;
                        /** @description Previously picked property, trait or attribute value. */
                        value: string;
                    }[];
                    /** @description Trait Regex */
                    trait_regex?: string;
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User Trait Names */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agg/user-trait-values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Trait Values
         * @description Get User Trait Values
         */
        get: {
            parameters: {
                query?: {
                    /** @description ID Regex */
                    id_regex?: string;
                    /** @description Trait Regex */
                    trait_regex?: string;
                    /** @description Trait Value Regex */
                    trait_value_regex?: string;
                    /** @description organization_id */
                    organization_id?: string;
                    /** @description app_id */
                    app_id?: string;
                    /** @description session_id */
                    session_id?: string;
                    /** @description conversation_id */
                    conversation_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User Trait Values */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/db/retrieve_data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve drilldown data
         * @description Retrieve drilldown data
         */
        get: {
            parameters: {
                query: {
                    id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response.  A JSON object or array. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/db/import_demo_data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Import demo data
         * @description Import demo data into the database.  This is used for testing and development purposes.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response.  A JSON object with a status of "ok". */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Status
                             * @description The status of the import operation
                             */
                            status: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/db/{collection}/{op}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query a collection
         * @description Query a collection
         */
        get: {
            parameters: {
                query?: {
                    filter?: string;
                    projection?: string;
                    sort?: string;
                    skip?: number;
                    limit?: number;
                    include?: string;
                };
                header?: never;
                path: {
                    collection: "users" | "events" | "sessions" | "conversations" | "messages" | "orgkeys" | "organizations" | "apps";
                    op: "find" | "findOne";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response.  Either an array of documents (if find) or a single document (if findOne) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgkeys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List organization keys
         * @description List all organization keys for an organization.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of organization keys */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Organization ID */
                            organization_id: string;
                            /** API Key */
                            apikey: string;
                        }[];
                    };
                };
            };
        };
        /**
         * Associate organization key
         * @description Associate an organization api key with an organization.  The PUT method takes both api key and organization_id from the request body.  The Authorization header can be the super admin key, or another valid organization api key.  When creating the very first api key for an organization,  the Authorization header would have to be the super admin key.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Organization ID */
                        organization_id: string;
                        /** API key */
                        apikey: string;
                    };
                };
            };
            responses: {
                /** @description Associated organization key */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Organization ID */
                            organization_id: string;
                            /** API Key */
                            apikey: string;
                        };
                    };
                };
            };
        };
        /**
         * Create organization key
         * @description Create an api key for an orgaization.  The POST method takes an organization_id from the request body, and then creates a new api key and associates it with the organization.  The Authorization header can be the super admin key, or another valid organization api key.  When creating the very first api key for an organization, the Authorization header would have to be the super admin key.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Organization ID */
                        organization_id: string;
                    };
                };
            };
            responses: {
                /** @description Created organization key */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Organization ID */
                            organization_id: string;
                            /** API Key */
                            apikey: string;
                        };
                    };
                };
            };
        };
        /**
         * Delete organization key
         * @description Delete an organization api key.  The Authorization header can contain another valid api key for this organization, or can contain the api key being deleted, or the super admin key.
         */
        delete: {
            parameters: {
                query?: {
                    apikey?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Delete an organization api key */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/udi": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List User Defined Intents
         * @description List User Defined Intents
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The user defined intent id. */
                            user_defined_intent_id: string;
                            /** @description The intent name and description. */
                            intent: {
                                name: string;
                                description: string;
                            };
                            /** @description The attributes of the intent.  Slot names and descriptions. */
                            attributes: {
                                name: string;
                                description: string;
                            }[];
                            /** @description Whether the intent is archived or not. */
                            archived?: boolean;
                        }[];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a User Defined Intent
         * @description Create a User Defined Intent
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The intent name and description. */
                        intent: {
                            name: string;
                            description: string;
                        };
                        /** @description The attributes of the intent.  Slot names and descriptions. */
                        attributes: {
                            name: string;
                            description: string;
                        }[];
                        /** @description Whether the intent is archived or not. */
                        archived?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The user defined intent id. */
                            user_defined_intent_id: string;
                            /** @description The intent name and description. */
                            intent: {
                                name: string;
                                description: string;
                            };
                            /** @description The attributes of the intent.  Slot names and descriptions. */
                            attributes: {
                                name: string;
                                description: string;
                            }[];
                            /** @description Whether the intent is archived or not. */
                            archived?: boolean;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/udi/{user_defined_intent_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a User Defined Intent
         * @description Get a User Defined Intent
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_defined_intent_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The user defined intent id. */
                            user_defined_intent_id: string;
                            /** @description The intent name and description. */
                            intent: {
                                name: string;
                                description: string;
                            };
                            /** @description The attributes of the intent.  Slot names and descriptions. */
                            attributes: {
                                name: string;
                                description: string;
                            }[];
                            /** @description Whether the intent is archived or not. */
                            archived?: boolean;
                        };
                    };
                };
            };
        };
        /**
         * Update a User Defined Intent
         * @description Update a User Defined Intent
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_defined_intent_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The intent name and description. */
                        intent: {
                            name: string;
                            description: string;
                        };
                        /** @description The attributes of the intent.  Slot names and descriptions. */
                        attributes: {
                            name: string;
                            description: string;
                        }[];
                        /** @description Whether the intent is archived or not. */
                        archived?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The user defined intent id. */
                            user_defined_intent_id: string;
                            /** @description The intent name and description. */
                            intent: {
                                name: string;
                                description: string;
                            };
                            /** @description The attributes of the intent.  Slot names and descriptions. */
                            attributes: {
                                name: string;
                                description: string;
                            }[];
                            /** @description Whether the intent is archived or not. */
                            archived?: boolean;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a User Defined Intent
         * @description Delete a User Defined Intent
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_defined_intent_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Handle an event
         * @description Handle an event.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Event Type
                         * @description The type of event being sent.
                         * @enum {string}
                         */
                        type: "start_session" | "end_session" | "identify" | "alias" | "track";
                    } & {
                        [key: string]: string | number | boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/identify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Identify a user
         * @description Identify a user by their unique ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that identifies a user
                         * @enum {string}
                         */
                        type: "identify";
                        /** @description The unique ID of the user */
                        id?: string;
                        /** @description The ID of the device, if applicable */
                        device_id?: string;
                        /** @description Any additional traits to be associated with the user (name, gender, etc) */
                        traits?: {
                            [key: string]: string | number | boolean;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/alias": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Alias a user
         * @description Alias a user by their unique ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that aliases a user
                         * @enum {string}
                         */
                        type: "alias";
                        /** @description The new ID of the user */
                        id: string;
                        /** @description The previous ID of the user */
                        previous_id: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/start-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start a session
         * @description Start a session for a user.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that starts a session
                         * @enum {string}
                         */
                        type: "start_session";
                        /** @description The unique ID of the user */
                        id?: string;
                        /** @description The ID of the device, if applicable */
                        device_id?: string;
                        /** @description Any additional attributes to be associated with the session */
                        attributes?: {
                            [key: string]: string | number | boolean;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/end-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * End a session
         * @description End a session for a user.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that ends a session
                         * @enum {string}
                         */
                        type: "end_session";
                        /** @description Any additional attributes to be associated with the session */
                        attributes?: {
                            [key: string]: string | number | boolean;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/track": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Track an event
         * @description Track an event for a user.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that tracks an arbitray event
                         * @enum {string}
                         */
                        type: "track";
                        /** @description The name of the event */
                        event: string;
                        /** @description The ID of the conversation, if applicable */
                        conversation_id?: string;
                        /** @description Any additional properties to be associated with the event */
                        properties?: {
                            [key: string]: string | number | boolean;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/start-conversation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start a conversation
         * @description Start a conversation for a user.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that tracks an arbitray event
                         * @enum {string}
                         */
                        type: "track";
                        /**
                         * @description The event that starts a conversation
                         * @enum {string}
                         */
                        event: "Conversation Started";
                        /** @description The ID of the conversation */
                        conversation_id: string;
                        /** @description Any additional properties to be associated with the event */
                        properties?: {
                            [key: string]: string | number | boolean;
                        };
                        /** @description Any additional attributes to be associated with the conversation */
                        attributes?: {
                            [key: string]: string | number | boolean;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/end-conversation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * End a conversation
         * @description End a conversation for a user.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that tracks an arbitray event
                         * @enum {string}
                         */
                        type: "track";
                        /**
                         * @description The event that ends a conversation
                         * @enum {string}
                         */
                        event: "Conversation Ended";
                        /** @description The ID of the conversation */
                        conversation_id: string;
                        /** @description Any additional properties to be associated with the event */
                        properties?: {
                            [key: string]: string | number | boolean;
                        };
                        /** @description Any additional attributes to be associated with the conversation */
                        attributes?: {
                            [key: string]: string | number | boolean;
                        };
                        conversation_analysis?: {
                            /** @description A summary of the conversation. */
                            summary: string;
                            /**
                             * @description The overall sentiment of the conversation.
                             * @enum {string}
                             */
                            sentiment: "positive" | "negative" | "neutral";
                            cost: number;
                        };
                        intent_analysis?: {
                            /** @description A summary of the user's intent. */
                            summary: string;
                            /**
                             * @description The sentiment associated with the intent.
                             * @enum {string}
                             */
                            sentiment: "positive" | "negative" | "neutral";
                            /**
                             * @description Whether the intent was successfully fulfilled.
                             * @enum {string}
                             */
                            intent_fulfilled: "yes" | "no";
                            cost: number;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/conversation-turn": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Conversation turn
         * @description A turn in a conversation.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that tracks an arbitray event
                         * @enum {string}
                         */
                        type: "track";
                        /**
                         * @description The event that represents a turn in a conversation
                         * @enum {string}
                         */
                        event: "Conversation Turn";
                        /** @description The ID of the conversation */
                        conversation_id: string;
                        /** @description Properties of a turn event */
                        properties: {
                            user: string;
                            assistant: string;
                            /** @description The ID of the assistant, if applicable */
                            assisant_id?: string;
                            /** @description The model name */
                            model?: string;
                            /** @description The number of tokens in the prompt */
                            prompt_tokens?: number;
                            /** @description The number of tokens in the completion */
                            completion_tokens?: number;
                            /** @description The cost of the event */
                            cost?: number;
                        } & {
                            [key: string]: string | number | boolean;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/conversation-usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Conversation usage
         * @description Usage of a conversation.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that tracks an arbitray event
                         * @enum {string}
                         */
                        type: "track";
                        /**
                         * @description The event that represents a usage in a conversation
                         * @enum {string}
                         */
                        event: "Conversation Usage";
                        /** @description The ID of the conversation */
                        conversation_id: string;
                        /** @description Properties of a usage event.  Either model and tokens (cost will be calculated if model is known), or cost directly. */
                        properties: {
                            /** @description The model name */
                            model: string;
                            /** @description The number of tokens in the prompt */
                            prompt_tokens: number;
                            /** @description The number of tokens in the completion */
                            completion_tokens: number;
                        } | {
                            /** @description The cost of the event */
                            cost: number;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/conversation-function": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Conversation function
         * @description A function in a conversation.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that tracks an arbitray event
                         * @enum {string}
                         */
                        type: "track";
                        /**
                         * @description The event that represents a usage in a conversation
                         * @enum {string}
                         */
                        event: "Conversation Usage";
                        /** @description The ID of the conversation */
                        conversation_id: string;
                        /** @description Properties of a usage event.  Either model and tokens (cost will be calculated if model is known), or cost directly. */
                        properties: {
                            /** @description The model name */
                            model: string;
                            /** @description The number of tokens in the prompt */
                            prompt_tokens: number;
                            /** @description The number of tokens in the completion */
                            completion_tokens: number;
                        } | {
                            /** @description The cost of the event */
                            cost: number;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/queue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Queue events
         * @description Queue events for processing.  Instead of processing the events immediately, they are sent to a queue for offline processing.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": ({
                        /**
                         * Event Type
                         * @description The type of event being sent.
                         * @enum {string}
                         */
                        type: "start_session" | "end_session" | "identify" | "alias" | "track";
                    } & {
                        [key: string]: string | number | boolean;
                    })[];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            status: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/summary/top-intents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Top Intents
         * @description Get a summary of top intents within a given time range
         */
        get: {
            parameters: {
                query: {
                    /** @description Time range for the summary */
                    range: {
                        /**
                         * @description The start of the range as an ISO date string
                         * @example 2021-01-01T00:00:00Z
                         */
                        start: string;
                        /**
                         * @description The end of the range as an ISO date string
                         * @example 2021-01-02T00:00:00Z
                         */
                        end: string;
                        /**
                         * @description The size of the bins, or points, in a chart
                         * @example day
                         * @enum {string}
                         */
                        period: "day" | "week" | "month";
                        /**
                         * @description The browser's timezone
                         * @example America/New_York
                         */
                        tz: string;
                    };
                    /** @description Scope rerult to this session id. */
                    session_id?: string;
                    /** @description Scope result to this conversation id. */
                    conversation_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Top Intents Summary.  An array of objects with intent names as keys and counts as values, sorted by count descending. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            intent: string;
                            count: number;
                        }[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/summary/user-sentiment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Sentiment
         * @description Get a summary of user sentiment within a given time range
         */
        get: {
            parameters: {
                query: {
                    /** @description Time range for the summary */
                    range: {
                        /**
                         * @description The start of the range as an ISO date string
                         * @example 2021-01-01T00:00:00Z
                         */
                        start: string;
                        /**
                         * @description The end of the range as an ISO date string
                         * @example 2021-01-02T00:00:00Z
                         */
                        end: string;
                        /**
                         * @description The size of the bins, or points, in a chart
                         * @example day
                         * @enum {string}
                         */
                        period: "day" | "week" | "month";
                        /**
                         * @description The browser's timezone
                         * @example America/New_York
                         */
                        tz: string;
                    };
                    /** @description Scope rerult to this session id. */
                    session_id?: string;
                    /** @description Scope result to this conversation id. */
                    conversation_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User Sentiment Chart. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Name of the chart */
                            chart_name: string;
                            /** @description Groups of pie charts, if group by was used. */
                            groups?: {
                                /** @description Group name */
                                group: string;
                                /** @description Slices for the group */
                                slices: {
                                    /** @description Label for the slice */
                                    label: string;
                                    /** @description Value for the slice */
                                    value: number;
                                    /** @description Percentage of the slice */
                                    percent: number;
                                    /** @description Drilldown id for this slice */
                                    drilldown_id?: string;
                                }[];
                            }[];
                            /** @description Slices of the pie chart, if no group by was used. */
                            slices?: {
                                /** @description Label for the slice */
                                label: string;
                                /** @description Value for the slice */
                                value: number;
                                /** @description Percentage of the slice */
                                percent: number;
                                /** @description Drilldown id for this slice */
                                drilldown_id?: string;
                            }[];
                            /** @description Highlights of the sentiment analysis chart, if not grouped. */
                            highlights?: {
                                /** @description Percentage of positive sentiment */
                                positive_percent: number;
                                /** @description Total count of positive sentiment */
                                positive_total: number;
                                /** @description Percentage of negative sentiment */
                                negative_percent: number;
                                /** @description Total count of negative sentiment */
                                negative_total: number;
                                /** @description Percentage of neutral sentiment */
                                neutral_percent: number;
                                /** @description Total count of neutral sentiment */
                                neutral_total: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/summary/user-conversations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Conversations
         * @description Get a summary of user conversations within a given time range
         */
        get: {
            parameters: {
                query: {
                    /** @description Time range for the summary */
                    range: {
                        /**
                         * @description The start of the range as an ISO date string
                         * @example 2021-01-01T00:00:00Z
                         */
                        start: string;
                        /**
                         * @description The end of the range as an ISO date string
                         * @example 2021-01-02T00:00:00Z
                         */
                        end: string;
                        /**
                         * @description The size of the bins, or points, in a chart
                         * @example day
                         * @enum {string}
                         */
                        period: "day" | "week" | "month";
                        /**
                         * @description The browser's timezone
                         * @example America/New_York
                         */
                        tz: string;
                    };
                    /** @description Scope rerult to this session id. */
                    session_id?: string;
                    /** @description Scope result to this conversation id. */
                    conversation_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User Conversations Chart. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The name of the chart */
                            chart_name: string;
                            /** @description The points of the chart */
                            points: {
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description The number of users who have had a conversation in the given range */
                                user_count: number;
                                /** @description The number of unique users who have had a conversation in the given range */
                                unique_user_count: number;
                                /** @description The number of conversations in the given range */
                                conversation_count: number;
                                /** @description The average duration of the conversations in milliseconds */
                                average_duration: number;
                                /** @description The average number of prompts in the conversations */
                                average_prompt_count: number;
                                /** @description The average number of intents per conversation */
                                average_intents_per_conversation: number;
                            }[];
                            /** @description The highlights of the chart */
                            highlights: {
                                average_duration: {
                                    /** @description The average duration of the conversations in milliseconds */
                                    value: number;
                                    /** @description The percent change from the previous period. */
                                    delta_percent: number;
                                };
                                average_prompt_count: {
                                    /** @description The average number of prompts in the conversations */
                                    value: number;
                                    /** @description The percent change from the previous period. */
                                    delta_percent: number;
                                };
                                average_intents_per_conversation: {
                                    /** @description The average number of intents per conversation */
                                    value: number;
                                    /** @description The percent change from the previous period. */
                                    delta_percent: number;
                                };
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/summary/engagement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Engagement
         * @description Get a summary of user engagement within a given time range
         */
        get: {
            parameters: {
                query: {
                    /** @description Time range for the summary */
                    range: {
                        /**
                         * @description The start of the range as an ISO date string
                         * @example 2021-01-01T00:00:00Z
                         */
                        start: string;
                        /**
                         * @description The end of the range as an ISO date string
                         * @example 2021-01-02T00:00:00Z
                         */
                        end: string;
                        /**
                         * @description The size of the bins, or points, in a chart
                         * @example day
                         * @enum {string}
                         */
                        period: "day" | "week" | "month";
                        /**
                         * @description The browser's timezone
                         * @example America/New_York
                         */
                        tz: string;
                    };
                    /** @description Scope rerult to this session id. */
                    session_id?: string;
                    /** @description Scope result to this conversation id. */
                    conversation_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User engagement Chart. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The name of the chart */
                            chart_name: string;
                            /** @description The points of the chart */
                            points: {
                                /** @description Start timestamp of the point */
                                start: string;
                                /** @description End timestamp of the point */
                                end: string;
                                /** @description Active users during this period */
                                user_count: number;
                                /** @description New users during this period */
                                new_user_count: number;
                                /** @description The number of conversations in this period */
                                conversation_count: number;
                                /** @description The number of intents in this period */
                                intent_count: number;
                            }[];
                            /** @description The highlights of the chart */
                            highlights: {
                                total_user_count: {
                                    /** @description The total number of users */
                                    value: number;
                                    /** @description The percentage change in the total number of users */
                                    delta_percent: number;
                                };
                                total_new_user_count: {
                                    /** @description The total number of new users */
                                    value: number;
                                    /** @description The percentage change in the total number of new users */
                                    delta_percent: number;
                                };
                                total_conversation_count: {
                                    /** @description The total number of conversations */
                                    value: number;
                                    /** @description The percentage change in the total number of conversations */
                                    delta_percent: number;
                                };
                                total_intent_count: {
                                    /** @description The total number of intents */
                                    value: number;
                                    /** @description The percentage change in the total number of intents */
                                    delta_percent: number;
                                };
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/summary/event-counts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Project Event Counts
         * @description Get a count of events for each passed in range.
         */
        get: {
            parameters: {
                query: {
                    /** @description Array of ranges */
                    ranges: {
                        /**
                         * @description The start of the range as an ISO date string
                         * @example 2021-01-01T00:00:00Z
                         */
                        start: string;
                        /**
                         * @description The end of the range as an ISO date string
                         * @example 2021-01-02T00:00:00Z
                         */
                        end: string;
                        /**
                         * @description The size of the bins, or points, in a chart
                         * @example day
                         * @enum {string}
                         */
                        period: "day" | "week" | "month";
                        /**
                         * @description The browser's timezone
                         * @example America/New_York
                         */
                        tz: string;
                    }[];
                    /** @description Scope rerult to this session id. */
                    session_id?: string;
                    /** @description Scope result to this conversation id. */
                    conversation_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Array of event counts for each range. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/summary/new-intents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get New Intents
         * @description Get a list of new (unknown) intent names.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Array of new intent names */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users
         * @description List users
         */
        get: {
            parameters: {
                query?: {
                    /** @description Regex to search for in user_id and traits.  This is a lucene style syntax. */
                    regex?: string;
                    /** @description Limit the number of results to return.  Default is 100000 */
                    limit?: number;
                    /** @description Offset the results by this number.  Default is 0 */
                    offset?: number;
                    /** @description Sort the results by this specification. */
                    sort?: {
                        /** @description Field to sort by */
                        value: string;
                        /**
                         * @description Order to sort by
                         * @enum {string}
                         */
                        order: "asc" | "desc";
                    };
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description List of matching users, limited by the limit and offset parameters */
                            users: {
                                /** @description User ID to display */
                                id: string;
                                /** @description The user ID in the database */
                                user_id: string;
                                /** @description List of aliases for the user */
                                aliases: string[];
                                /** @description Date the user was created */
                                created_at: string;
                                /** @description User traits */
                                traits: {
                                    [key: string]: string | number | boolean;
                                };
                            }[];
                            /** @description Total number of users matching the query with no limit */
                            total: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user details
         * @description Get user details
         */
        get: {
            parameters: {
                query: {
                    /** @description User database ID */
                    user_id: string;
                    /** @description Limit the number of results to return.  Default is 100000 */
                    limit?: number;
                    /** @description Offset the results by this number.  Default is 0 */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description List of sessions for the user */
                            sessions: {
                                /** @description Session ID */
                                session_id: string;
                                /** @description User ID */
                                user_id: string;
                                /** @description Session start date */
                                started_at: string;
                                /** @description Session end date */
                                ended_at: string;
                                /** @description Session duration in milliseconds */
                                duration?: number;
                                /** @description Session attributes */
                                attributes: {
                                    [key: string]: string | number | boolean;
                                };
                                /** @description User traits at the time of the session */
                                user_traits: {
                                    [key: string]: string | number | boolean;
                                };
                                /** @description List of events in the session */
                                events: {
                                    /** @description User ID */
                                    user_id: string;
                                    /** @description Event ID */
                                    event_id: string;
                                    /** @description Session ID */
                                    session_id: string;
                                    /** @description Conversation ID */
                                    conversation_id?: string;
                                    /** @description Event timestamp */
                                    timestamp: string;
                                    /** @description Event name */
                                    event: string;
                                    /** @description Event properties */
                                    properties: {
                                        [key: string]: string | number | boolean | string[] | number[];
                                    };
                                    /** @description User traits at the time of the event */
                                    user_traits: {
                                        [key: string]: string | number | boolean;
                                    };
                                }[];
                            }[];
                            /** @description User ID to display */
                            id: string;
                            /** @description The user ID in the database */
                            user_id: string;
                            /** @description List of aliases for the user */
                            aliases: string[];
                            /** @description Date the user was created */
                            created_at: string;
                            /** @description User traits */
                            traits: {
                                [key: string]: string | number | boolean;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/insights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user insights
         * @description Get user insights
         */
        get: {
            parameters: {
                query: {
                    /** @description User database ID */
                    user_id: string;
                    /** @description Limit the number of results to return.  Default is 100000 */
                    limit?: number;
                    /** @description Offset the results by this number.  Default is 0 */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User insights */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description List of conversations for the user */
                            conversations: {
                                /** @description User ID */
                                user_id: string;
                                /** @description Session ID */
                                session_id: string;
                                /** @description Conversation ID */
                                conversation_id: string;
                                /** @description Conversation start date */
                                started_at: string;
                                /** @description Conversation duration in milliseconds */
                                duration?: number;
                                /** @description Sentiment of the conversation */
                                sentiment: string;
                                /** @description Summary of the conversation */
                                summary: string;
                                /** @description Number of successful intents in the conversation */
                                successful_intents: number;
                                /** @description Number of unsuccessful intents in the conversation */
                                unsuccessful_intents: number;
                            }[];
                            /** @description User ID to display */
                            id: string;
                            /** @description The user ID in the database */
                            user_id: string;
                            /** @description List of aliases for the user */
                            aliases: string[];
                            /** @description Date the user was created */
                            created_at: string;
                            /** @description User traits */
                            traits: {
                                [key: string]: string | number | boolean;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/conversation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user conversation
         * @description Get user conversation
         */
        get: {
            parameters: {
                query: {
                    /** @description Conversation ID to fetch messages from */
                    conversation_id: string;
                    /** @description User database ID */
                    user_id: string;
                    /** @description Limit the number of results to return.  Default is 100000 */
                    limit?: number;
                    /** @description Offset the results by this number.  Default is 0 */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User conversation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description User message content */
                            user: string;
                            /** @description Assistant message content */
                            assistant: string;
                        }[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get event details
         * @description Get event details
         */
        get: {
            parameters: {
                query: {
                    /** @description Event ID */
                    event_id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Event details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            organization_id: string;
                            app_id: string;
                            session_id: string;
                            user_id: string;
                            event_id: string;
                            conversation_id?: string;
                            origin_event_id?: string;
                            timestamp?: string;
                            event?: string;
                            properties?: {
                                [key: string]: string | number | boolean | string[] | number[];
                            };
                            user_traits?: {
                                [key: string]: string | number | boolean;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/identify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Identify user
         * @description Identify user.  The user id, or the user's device id, or both must be provided
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The unique ID of the user */
                        id?: string;
                        /** @description The ID of the device, if applicable */
                        device_id?: string;
                        /** @description Any additional traits to be associated with the user (name, gender, etc) */
                        traits?: {
                            [key: string]: string | number | boolean;
                        };
                    };
                };
            };
            responses: {
                /** @description User identified */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            organization_id: string;
                            app_id: string;
                            user_id: string;
                            id: string;
                            aliases: string[];
                            created_at: string;
                            traits: {
                                [key: string]: string | number | boolean;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/alias": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Alias user
         * @description Alias user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The new ID of the user */
                        id: string;
                        /** @description The previous ID of the user */
                        previous_id: string;
                    };
                };
            };
            responses: {
                /** @description User aliased */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            organization_id: string;
                            app_id: string;
                            user_id: string;
                            id: string;
                            aliases: string[];
                            created_at: string;
                            traits: {
                                [key: string]: string | number | boolean;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/live-events/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get events in a time range, with optional limit.  Returns events in descending order.
         * @description Get live events.  The start and end timestamps are required. The limit is optional and defaults to 150.
         */
        get: {
            parameters: {
                query: {
                    /** @description The start timestamp of the events to retrieve */
                    start: string;
                    /** @description The end timestamp of the events to retrieve */
                    end: string;
                    /** @description The maximum number of events to retrieve (default is 150) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            organization_id: string;
                            app_id: string;
                            session_id: string;
                            user_id: string;
                            event_id: string;
                            conversation_id?: string;
                            origin_event_id?: string;
                            timestamp?: string;
                            event?: string;
                            properties?: {
                                [key: string]: string | number | boolean | string[] | number[];
                            };
                            user_traits?: {
                                [key: string]: string | number | boolean;
                            };
                        }[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/live-events/realtime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get authorization key for WebSocket connection
         * @description Get authorization key for WebSocket connection.  Specify a session_id to scope events to a specific session.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The session ID of the events to listen for.  If not specified, all events will be sent. */
                    session_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Authorization Key
                             * @description The authorization key for the WebSocket connection
                             */
                            authorization_key: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cohorts/byName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a cohort by name
         * @description Get a cohort by name
         */
        get: {
            parameters: {
                query: {
                    /** @description Cohort name */
                    name: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cohort found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The organization id of the cohort. */
                            organization_id: string;
                            /** @description The app id of the cohort. */
                            app_id: string;
                            /** @description The cohort id of the cohort. */
                            cohort_id: string;
                            /** @description The date the cohort was created. */
                            created_at: string;
                            /** @description The date the cohort was updated. */
                            updated_at: string;
                            /** @description The name of the cohort. */
                            name: string;
                            /** @description The description of the cohort. */
                            description?: string;
                            /** @description The terms that make up the cohort.  There must be at least one term in the array. */
                            terms: {
                                /**
                                 * @description The operator to use when combining this term with other terms.  The default is "and".
                                 * @default and
                                 * @enum {string}
                                 */
                                operator: "and" | "or";
                                termFilter: components["schemas"]["CohortEventFilter"] | components["schemas"]["CohortIntentFilter"] | components["schemas"]["CohortTraitFilter"] | components["schemas"]["CohortCohortFilter"];
                            }[];
                        };
                    };
                };
                /** @description Cohort not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cohorts/byId": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a cohort by id
         * @description Get a cohort by id
         */
        get: {
            parameters: {
                query: {
                    /** @description Cohort id */
                    cohort_id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cohort found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The organization id of the cohort. */
                            organization_id: string;
                            /** @description The app id of the cohort. */
                            app_id: string;
                            /** @description The cohort id of the cohort. */
                            cohort_id: string;
                            /** @description The date the cohort was created. */
                            created_at: string;
                            /** @description The date the cohort was updated. */
                            updated_at: string;
                            /** @description The name of the cohort. */
                            name: string;
                            /** @description The description of the cohort. */
                            description?: string;
                            /** @description The terms that make up the cohort.  There must be at least one term in the array. */
                            terms: {
                                /**
                                 * @description The operator to use when combining this term with other terms.  The default is "and".
                                 * @default and
                                 * @enum {string}
                                 */
                                operator: "and" | "or";
                                termFilter: components["schemas"]["CohortEventFilter"] | components["schemas"]["CohortIntentFilter"] | components["schemas"]["CohortTraitFilter"] | components["schemas"]["CohortCohortFilter"];
                            }[];
                        };
                    };
                };
                /** @description Cohort not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cohorts/evaluate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Evaluate cohort
         * @description Evaluate cohort, get a list of users in the cohort
         */
        get: {
            parameters: {
                query: {
                    /** @description Cohort id */
                    cohort_id: string;
                    /** @description Number of users to skip */
                    skip?: number;
                    /** @description Number of users to return */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cohort evaluated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            organization_id: string;
                            app_id: string;
                            user_id: string;
                            id: string;
                            aliases: string[];
                            created_at: string;
                            traits: {
                                [key: string]: string | number | boolean;
                            };
                        }[];
                    };
                };
                /** @description Cohort not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cohorts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cohorts
         * @description Get cohorts
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cohorts found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The organization id of the cohort. */
                            organization_id: string;
                            /** @description The app id of the cohort. */
                            app_id: string;
                            /** @description The cohort id of the cohort. */
                            cohort_id: string;
                            /** @description The date the cohort was created. */
                            created_at: string;
                            /** @description The date the cohort was updated. */
                            updated_at: string;
                            /** @description The name of the cohort. */
                            name: string;
                            /** @description The description of the cohort. */
                            description?: string;
                            /** @description The terms that make up the cohort.  There must be at least one term in the array. */
                            terms: {
                                /**
                                 * @description The operator to use when combining this term with other terms.  The default is "and".
                                 * @default and
                                 * @enum {string}
                                 */
                                operator: "and" | "or";
                                termFilter: components["schemas"]["CohortEventFilter"] | components["schemas"]["CohortIntentFilter"] | components["schemas"]["CohortTraitFilter"] | components["schemas"]["CohortCohortFilter"];
                            }[];
                        }[];
                    };
                };
            };
        };
        /**
         * Update cohort
         * @description Update cohort
         */
        put: {
            parameters: {
                query: {
                    /** @description Cohort id */
                    cohort_id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The name of the cohort. */
                        name: string;
                        /** @description The description of the cohort. */
                        description?: string;
                        /** @description The terms that make up the cohort.  There must be at least one term in the array. */
                        terms: {
                            /**
                             * @description The operator to use when combining this term with other terms.  The default is "and".
                             * @default and
                             * @enum {string}
                             */
                            operator?: "and" | "or";
                            termFilter: components["schemas"]["CohortEventFilter"] | components["schemas"]["CohortIntentFilter"] | components["schemas"]["CohortTraitFilter"] | components["schemas"]["CohortCohortFilter"];
                        }[];
                    };
                };
            };
            responses: {
                /** @description Cohort updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The organization id of the cohort. */
                            organization_id: string;
                            /** @description The app id of the cohort. */
                            app_id: string;
                            /** @description The cohort id of the cohort. */
                            cohort_id: string;
                            /** @description The date the cohort was created. */
                            created_at: string;
                            /** @description The date the cohort was updated. */
                            updated_at: string;
                            /** @description The name of the cohort. */
                            name: string;
                            /** @description The description of the cohort. */
                            description?: string;
                            /** @description The terms that make up the cohort.  There must be at least one term in the array. */
                            terms: {
                                /**
                                 * @description The operator to use when combining this term with other terms.  The default is "and".
                                 * @default and
                                 * @enum {string}
                                 */
                                operator: "and" | "or";
                                termFilter: components["schemas"]["CohortEventFilter"] | components["schemas"]["CohortIntentFilter"] | components["schemas"]["CohortTraitFilter"] | components["schemas"]["CohortCohortFilter"];
                            }[];
                        };
                    };
                };
            };
        };
        /**
         * Create cohort
         * @description Create cohort
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The name of the cohort. */
                        name: string;
                        /** @description The description of the cohort. */
                        description?: string;
                        /** @description The terms that make up the cohort.  There must be at least one term in the array. */
                        terms: {
                            /**
                             * @description The operator to use when combining this term with other terms.  The default is "and".
                             * @default and
                             * @enum {string}
                             */
                            operator?: "and" | "or";
                            termFilter: components["schemas"]["CohortEventFilter"] | components["schemas"]["CohortIntentFilter"] | components["schemas"]["CohortTraitFilter"] | components["schemas"]["CohortCohortFilter"];
                        }[];
                    };
                };
            };
            responses: {
                /** @description Cohort created */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The organization id of the cohort. */
                            organization_id: string;
                            /** @description The app id of the cohort. */
                            app_id: string;
                            /** @description The cohort id of the cohort. */
                            cohort_id: string;
                            /** @description The date the cohort was created. */
                            created_at: string;
                            /** @description The date the cohort was updated. */
                            updated_at: string;
                            /** @description The name of the cohort. */
                            name: string;
                            /** @description The description of the cohort. */
                            description?: string;
                            /** @description The terms that make up the cohort.  There must be at least one term in the array. */
                            terms: {
                                /**
                                 * @description The operator to use when combining this term with other terms.  The default is "and".
                                 * @default and
                                 * @enum {string}
                                 */
                                operator: "and" | "or";
                                termFilter: components["schemas"]["CohortEventFilter"] | components["schemas"]["CohortIntentFilter"] | components["schemas"]["CohortTraitFilter"] | components["schemas"]["CohortCohortFilter"];
                            }[];
                        };
                    };
                };
            };
        };
        /**
         * Delete cohort
         * @description Delete cohort
         */
        delete: {
            parameters: {
                query: {
                    /** @description Cohort id */
                    cohort_id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cohort deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CohortEventFilter: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "event";
            /** @description The name of the event.  Can be "Any Event" to match any event. */
            event_name: string;
            /** @description If specified the event must have all the property/values specified.  User traits on the event are also valid. */
            with?: {
                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                property_name: string;
                /**
                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                 * @example eq
                 * @enum {string}
                 */
                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                values: (string | number | boolean)[];
            }[];
            /**
             * @description If specified, the event must have occurred within this time range.
             * @example {
             *       "start": "2021-01-01T00:00:00Z",
             *       "end": "2021-01-02T00:00:00Z"
             *     }
             */
            within?: {
                /**
                 * @description The start of the time range as an ISO date string
                 * @example 2021-01-01T00:00:00Z
                 */
                start?: string;
                /**
                 * @description The end of the time range as an ISO date string
                 * @example 2021-01-02T00:00:00Z
                 */
                end?: string;
                /**
                 * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                 * @example {
                 *       "number": 1,
                 *       "unit": "day",
                 *       "tz": "America/New_York"
                 *     }
                 */
                period?: {
                    /**
                     * @description The number of time units
                     * @example 1
                     */
                    number: number;
                    /**
                     * @description The time unit
                     * @example day
                     * @enum {string}
                     */
                    unit: "day" | "week" | "month";
                    /**
                     * @description The timezone
                     * @example America/New_York
                     */
                    tz: string;
                };
            };
            /** @description If specified, the number of events of this type that must have occurred within the time range. The default is 1. */
            number_of?: number;
            /**
             * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
             * @enum {string}
             */
            number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
        };
        CohortIntentFilter: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "intent";
            /** @description The name of the intent.  Can be "Any Intent" to match any intent. */
            intent: string;
            /** @description If specified, the intent must have the attribute/values specified. */
            with?: {
                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                property_name: string;
                /**
                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                 * @example eq
                 * @enum {string}
                 */
                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                values: (string | number | boolean)[];
            }[];
            /**
             * @description If specified, the intent must have occurred within this time range.
             * @example {
             *       "start": "2021-01-01T00:00:00Z",
             *       "end": "2021-01-02T00:00:00Z"
             *     }
             */
            within?: {
                /**
                 * @description The start of the time range as an ISO date string
                 * @example 2021-01-01T00:00:00Z
                 */
                start?: string;
                /**
                 * @description The end of the time range as an ISO date string
                 * @example 2021-01-02T00:00:00Z
                 */
                end?: string;
                /**
                 * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                 * @example {
                 *       "number": 1,
                 *       "unit": "day",
                 *       "tz": "America/New_York"
                 *     }
                 */
                period?: {
                    /**
                     * @description The number of time units
                     * @example 1
                     */
                    number: number;
                    /**
                     * @description The time unit
                     * @example day
                     * @enum {string}
                     */
                    unit: "day" | "week" | "month";
                    /**
                     * @description The timezone
                     * @example America/New_York
                     */
                    tz: string;
                };
            };
            /** @description If specified, the number of intents of this type that must have occurred within the time range. The default is 1. */
            number_of?: number;
            /**
             * @description If specified, the operator to use when filtering the number of events.  The default is "gte".
             * @enum {string}
             */
            number_of_operator?: "eq" | "gt" | "gte" | "lt" | "lte";
        };
        CohortTraitFilter: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "trait";
            /** @description If specified, the trait must have the trait/values specified. */
            with?: {
                /** @description The name of the property whose values are being filtered.  This is typically a trait or event property. */
                property_name: string;
                /**
                 * @description The comparison operator to use when filtering the property values.  If not specified, the default is "eq".
                 * @example eq
                 * @enum {string}
                 */
                operator?: "eq" | "neq" | "in" | "nin" | "case_insensitive_eq" | "case_insensitive_neq" | "regex" | "not_regex" | "between" | "gt" | "gte" | "lt" | "lte";
                /** @description The values to filter the property by.  This can be an array of one, in which case all operators are supported, or an array of multiple values, in which case only "in" and "nin" are supported. */
                values: (string | number | boolean)[];
            }[];
            /**
             * @description If specified, the trait must have occurred within this time range.
             * @example {
             *       "start": "2021-01-01T00:00:00Z",
             *       "end": "2021-01-02T00:00:00Z"
             *     }
             */
            within?: {
                /**
                 * @description The start of the time range as an ISO date string
                 * @example 2021-01-01T00:00:00Z
                 */
                start?: string;
                /**
                 * @description The end of the time range as an ISO date string
                 * @example 2021-01-02T00:00:00Z
                 */
                end?: string;
                /**
                 * @description The period of time to use when filtering the data.  If specified, overrides start and end.  This is typically used for events.
                 * @example {
                 *       "number": 1,
                 *       "unit": "day",
                 *       "tz": "America/New_York"
                 *     }
                 */
                period?: {
                    /**
                     * @description The number of time units
                     * @example 1
                     */
                    number: number;
                    /**
                     * @description The time unit
                     * @example day
                     * @enum {string}
                     */
                    unit: "day" | "week" | "month";
                    /**
                     * @description The timezone
                     * @example America/New_York
                     */
                    tz: string;
                };
            };
        };
        CohortCohortFilter: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cohort";
            /** @description The name of the cohort.  Can be "All Users" to match all users. */
            name: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
