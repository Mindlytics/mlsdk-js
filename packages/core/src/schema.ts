/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/events/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Handle an event
         * @description Handle an event.
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    Authorization: string;
                    "x-app-id": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Event Type
                         * @description The type of event being sent.
                         * @enum {string}
                         */
                        type: "start_session" | "end_session" | "identify" | "alias" | "track";
                    } & {
                        [key: string]: string | number | boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/identify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Identify a user
         * @description Identify a user by their unique ID.
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    Authorization: string;
                    "x-app-id": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that identifies a user
                         * @enum {string}
                         */
                        type: "identify";
                        /** @description The unique ID of the user */
                        id: string;
                        /** @description Any additional traits to be associated with the user (name, gender, etc) */
                        traits?: {
                            [key: string]: string | number | boolean;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/alias": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Alias a user
         * @description Alias a user by their unique ID.
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    Authorization: string;
                    "x-app-id": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that aliases a user
                         * @enum {string}
                         */
                        type: "alias";
                        /** @description The new ID of the user */
                        id: string;
                        /** @description The previous ID of the user */
                        previous_id: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/start-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start a session
         * @description Start a session for a user.
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    Authorization: string;
                    "x-app-id": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that starts a session
                         * @enum {string}
                         */
                        type: "start_session";
                        /** @description Any additional attributes to be associated with the session */
                        attributes?: {
                            [key: string]: string | number | boolean;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/end-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * End a session
         * @description End a session for a user.
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    Authorization: string;
                    "x-app-id": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that ends a session
                         * @enum {string}
                         */
                        type: "end_session";
                        /** @description Any additional attributes to be associated with the session */
                        attributes?: {
                            [key: string]: string | number | boolean;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/track": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Track an event
         * @description Track an event for a user.
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    Authorization: string;
                    "x-app-id": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that tracks an arbitray event
                         * @enum {string}
                         */
                        type: "track";
                        /** @description The name of the event */
                        event: string;
                        /** @description The ID of the conversation, if applicable */
                        conversation_id?: string;
                        /** @description Any additional properties to be associated with the event */
                        properties?: {
                            [key: string]: string | number | boolean;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/start-conversation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start a conversation
         * @description Start a conversation for a user.
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    Authorization: string;
                    "x-app-id": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that tracks an arbitray event
                         * @enum {string}
                         */
                        type: "track";
                        /**
                         * @description The event that starts a conversation
                         * @enum {string}
                         */
                        event: "Conversation Started";
                        /** @description The ID of the conversation */
                        conversation_id: string;
                        /** @description Any additional properties to be associated with the event */
                        properties?: {
                            [key: string]: string | number | boolean;
                        };
                        /** @description Any additional attributes to be associated with the conversation */
                        attributes?: {
                            [key: string]: string | number | boolean;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/end-conversation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * End a conversation
         * @description End a conversation for a user.
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    Authorization: string;
                    "x-app-id": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that tracks an arbitray event
                         * @enum {string}
                         */
                        type: "track";
                        /**
                         * @description The event that ends a conversation
                         * @enum {string}
                         */
                        event: "Conversation Ended";
                        /** @description The ID of the conversation */
                        conversation_id: string;
                        /** @description Any additional properties to be associated with the event */
                        properties?: {
                            [key: string]: string | number | boolean;
                        };
                        /** @description Any additional attributes to be associated with the conversation */
                        attributes?: {
                            [key: string]: string | number | boolean;
                        };
                        conversation_analysis?: {
                            /** @description A summary of the conversation. */
                            summary: string;
                            /**
                             * @description The overall sentiment of the conversation.
                             * @enum {string}
                             */
                            sentiment: "positive" | "negative" | "neutral";
                            cost: number;
                        };
                        intent_analysis?: {
                            /** @description A summary of the user's intent. */
                            summary: string;
                            /**
                             * @description The sentiment associated with the intent.
                             * @enum {string}
                             */
                            sentiment: "positive" | "negative" | "neutral";
                            /**
                             * @description Whether the intent was successfully fulfilled.
                             * @enum {string}
                             */
                            intent_fulfilled: "yes" | "no";
                            cost: number;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/conversation-turn": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Conversation turn
         * @description A turn in a conversation.
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    Authorization: string;
                    "x-app-id": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that tracks an arbitray event
                         * @enum {string}
                         */
                        type: "track";
                        /**
                         * @description The event that represents a turn in a conversation
                         * @enum {string}
                         */
                        event: "Conversation Turn";
                        /** @description The ID of the conversation */
                        conversation_id: string;
                        /** @description Properties of a tun event */
                        properties: {
                            user: string;
                            assistant: string;
                        } & {
                            [key: string]: string | number | boolean;
                        };
                        turn_analysis?: {
                            /** @description The user turn in the dialog. */
                            user: {
                                /** @description The actions that the user is taking in this turn. */
                                actions: {
                                    /**
                                     * @description The action the user is taking in this turn. One of the predefined UserActionNames.
                                     * @enum {string}
                                     */
                                    action: "Intent Informed" | "Intent Rejected" | "Intent Accepted" | "Attribute Informed" | "Attribute Demanded" | "Attribute Accepted" | "Attribute Denied" | "Attribute Selected" | "Attribute AlternateRequested" | "Thank the Assistant" | "End the Conversation";
                                    /** @description The name of the slot being referred to in the action. */
                                    slot?: string;
                                    /** @description The values of the slot being referred to in the action. */
                                    values?: string[];
                                }[];
                                /** @description The state of the dialog at this point. */
                                state: {
                                    /** @description The intent that the user is currently trying to accomplish. */
                                    active_intent: string;
                                    /** @description The slots (or information) that the user has requested from the system in this turn. */
                                    requested_slots: string[];
                                    /** @description The values of the slots that the user has provided so far in the dialog.  Keys are slot names, values are arrays of slot values. */
                                    slot_values: {
                                        [key: string]: string[];
                                    };
                                };
                            };
                            /** @description The system turn in the dialog. */
                            system: {
                                /** @description The actions that the system is taking in this turn. */
                                actions: {
                                    /**
                                     * @description The action the system is taking in this turn. One of the predefined SystemActionNames.
                                     * @enum {string}
                                     */
                                    action: "Attribute Advised" | "Attribute Requested" | "Attribute Confirmed" | "Attribute Offered" | "Status Notified Success" | "Status Notified Failure" | "Count Informed" | "Intent Offered" | "More Prompted" | "End the Conversation";
                                    /** @description The name of the slot being referred to in the action. */
                                    slot?: string;
                                    /** @description The values of the slot being referred to in the action. */
                                    values?: string[];
                                }[];
                            };
                        };
                        intent_analysis?: {
                            /** @description A summary of the user's intent. */
                            summary: string;
                            /**
                             * @description The sentiment associated with the intent.
                             * @enum {string}
                             */
                            sentiment: "positive" | "negative" | "neutral";
                            /**
                             * @description Whether the intent was successfully fulfilled.
                             * @enum {string}
                             */
                            intent_fulfilled: "yes" | "no";
                            cost: number;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/conversation-usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Conversation usage
         * @description Usage of a conversation.
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    Authorization: string;
                    "x-app-id": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that tracks an arbitray event
                         * @enum {string}
                         */
                        type: "track";
                        /**
                         * @description The event that represents a usage in a conversation
                         * @enum {string}
                         */
                        event: "Conversation Usage";
                        /** @description The ID of the conversation */
                        conversation_id: string;
                        /** @description Properties of a usage event.  Either model and tokens (cost will be calculated if model is known), or cost directly. */
                        properties: {
                            /** @description The model name */
                            model: string;
                            /** @description The number of tokens in the prompt */
                            prompt_tokens: number;
                            /** @description The number of tokens in the completion */
                            completion_tokens: number;
                        } | {
                            /** @description The cost of the event */
                            cost: number;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/event/conversation-function": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Conversation function
         * @description A function in a conversation.
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    Authorization: string;
                    "x-app-id": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique session ID generated by caller */
                        session_id: string;
                        /** @description The timestamp of the event, defaults to "now" if not specified. */
                        timestamp?: string;
                        /**
                         * @description The event that tracks an arbitray event
                         * @enum {string}
                         */
                        type: "track";
                        /**
                         * @description The event that represents a usage in a conversation
                         * @enum {string}
                         */
                        event: "Conversation Usage";
                        /** @description The ID of the conversation */
                        conversation_id: string;
                        /** @description Properties of a usage event.  Either model and tokens (cost will be calculated if model is known), or cost directly. */
                        properties: {
                            /** @description The model name */
                            model: string;
                            /** @description The number of tokens in the prompt */
                            prompt_tokens: number;
                            /** @description The number of tokens in the completion */
                            completion_tokens: number;
                        } | {
                            /** @description The cost of the event */
                            cost: number;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ({
                            /**
                             * Event Type
                             * @description The type of event being sent.
                             * @enum {string}
                             */
                            type: "start_session" | "end_session" | "identify" | "alias" | "track";
                        } & {
                            [key: string]: string | number | boolean;
                        })[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
